// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/custom/ges.proto

#include "mediapipe/calculators/custom/ges.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fcustom_2fges_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto;
namespace mediapipe {
class GesOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GesOptions> _instance;
} _GesOptions_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_GesOptions_default_instance_;
    new (ptr) ::mediapipe::GesOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::GesOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fcustom_2fges_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2fcustom_2fges_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fcustom_2fges_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fcustom_2fges_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::GesOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GesOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::GesOptions, show_text_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GesOptions, verbose_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::GesOptions, show_fps_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::GesOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_GesOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fcustom_2fges_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&mediapipe/calculators/custom/ges.proto"
  "\022\tmediapipe\032$mediapipe/framework/calcula"
  "tor.proto\"\232\001\n\nGesOptions\022\027\n\tshow_text\030\001 "
  "\001(\010:\004true\022\026\n\007verbose\030\002 \001(\010:\005false\022\026\n\010sho"
  "w_fps\030\003 \001(\010:\004true2C\n\003ext\022\034.mediapipe.Cal"
  "culatorOptions\030\343\345\355| \001(\0132\025.mediapipe.GesO"
  "ptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_sccs[1] = {
  &scc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_once;
static bool descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto = {
  &descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_initialized, descriptor_table_protodef_mediapipe_2fcalculators_2fcustom_2fges_2eproto, "mediapipe/calculators/custom/ges.proto", 246,
  &descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_sccs, descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fcustom_2fges_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fcustom_2fges_2eproto, 1, file_level_enum_descriptors_mediapipe_2fcalculators_2fcustom_2fges_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fcustom_2fges_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fcalculators_2fcustom_2fges_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fcalculators_2fcustom_2fges_2eproto), true);
namespace mediapipe {

// ===================================================================

void GesOptions::InitAsDefaultInstance() {
}
class GesOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<GesOptions>()._has_bits_);
  static void set_has_show_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GesOptions::GesOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.GesOptions)
}
GesOptions::GesOptions(const GesOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&verbose_, &from.verbose_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_fps_) -
    reinterpret_cast<char*>(&verbose_)) + sizeof(show_fps_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.GesOptions)
}

void GesOptions::SharedCtor() {
  verbose_ = false;
  show_text_ = true;
  show_fps_ = true;
}

GesOptions::~GesOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.GesOptions)
  SharedDtor();
}

void GesOptions::SharedDtor() {
}

void GesOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GesOptions& GesOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GesOptions_mediapipe_2fcalculators_2fcustom_2fges_2eproto.base);
  return *internal_default_instance();
}


void GesOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.GesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    verbose_ = false;
    show_text_ = true;
    show_fps_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GesOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool show_text = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_text(&has_bits);
          show_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verbose = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_verbose(&has_bits);
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_fps = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_fps(&has_bits);
          show_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GesOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.GesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_text = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show_text(), target);
  }

  // optional bool verbose = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  // optional bool show_fps = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.GesOptions)
  return target;
}

size_t GesOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.GesOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool verbose = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool show_text = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool show_fps = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GesOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.GesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GesOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GesOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.GesOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.GesOptions)
    MergeFrom(*source);
  }
}

void GesOptions::MergeFrom(const GesOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.GesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      verbose_ = from.verbose_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_text_ = from.show_text_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_fps_ = from.show_fps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GesOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.GesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GesOptions::CopyFrom(const GesOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.GesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GesOptions::IsInitialized() const {
  return true;
}

void GesOptions::InternalSwap(GesOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(verbose_, other->verbose_);
  swap(show_text_, other->show_text_);
  swap(show_fps_, other->show_fps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GesOptions::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GesOptions::kExtFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::GesOptions >, 11, false >
  GesOptions::ext(kExtFieldNumber, *::mediapipe::GesOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::GesOptions* Arena::CreateMaybeMessage< ::mediapipe::GesOptions >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::GesOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
