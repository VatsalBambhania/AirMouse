// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/custom/controlmouse.proto

#include "mediapipe/calculators/custom/controlmouse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto;
namespace mediapipe {
class ControlmouseOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlmouseOptions> _instance;
} _ControlmouseOptions_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_ControlmouseOptions_default_instance_;
    new (ptr) ::mediapipe::ControlmouseOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::ControlmouseOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, enable_click_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, enable_control_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, no_of_decimal_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, verbose_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, pw_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, cw_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, make_steady_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, click_thresh_angle_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, use_angle_for_clicking_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, use_thresh_for_stability_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, dist_thresh_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, scroll_stready_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ControlmouseOptions, scroll_thresh_),
  0,
  1,
  4,
  2,
  5,
  6,
  8,
  7,
  9,
  3,
  10,
  11,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::mediapipe::ControlmouseOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ControlmouseOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/mediapipe/calculators/custom/controlmo"
  "use.proto\022\tmediapipe\032$mediapipe/framewor"
  "k/calculator.proto\"\313\003\n\023ControlmouseOptio"
  "ns\022\033\n\014enable_click\030\001 \001(\010:\005false\022\035\n\016enabl"
  "e_control\030\002 \001(\010:\005false\022\030\n\rno_of_decimal\030"
  "\003 \001(\005:\0013\022\026\n\007verbose\030\004 \001(\010:\005false\022\017\n\002pw\030\005"
  " \001(\002:\0030.2\022\017\n\002cw\030\006 \001(\002:\0030.8\022\031\n\013make_stead"
  "y\030\007 \001(\010:\004true\022\036\n\022click_thresh_angle\030\010 \001("
  "\005:\00285\022$\n\026use_angle_for_clicking\030\t \001(\010:\004t"
  "rue\022\'\n\030use_thresh_for_stability\030\n \001(\010:\005f"
  "alse\022\027\n\013dist_thresh\030\013 \001(\005:\00210\022\031\n\016scroll_"
  "stready\030\014 \001(\005:\0013\022\030\n\rscroll_thresh\030\r \001(\005:"
  "\00152L\n\003ext\022\034.mediapipe.CalculatorOptions\030"
  "\344\345\355| \001(\0132\036.mediapipe.ControlmouseOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_deps[1] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_sccs[1] = {
  &scc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_once;
static bool descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto = {
  &descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_initialized, descriptor_table_protodef_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto, "mediapipe/calculators/custom/controlmouse.proto", 560,
  &descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_once, descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_sccs, descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto, 1, file_level_enum_descriptors_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto), true);
namespace mediapipe {

// ===================================================================

void ControlmouseOptions::InitAsDefaultInstance() {
}
class ControlmouseOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlmouseOptions>()._has_bits_);
  static void set_has_enable_click(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_no_of_decimal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_make_steady(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_click_thresh_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_angle_for_clicking(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_thresh_for_stability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dist_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scroll_stready(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scroll_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ControlmouseOptions::ControlmouseOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.ControlmouseOptions)
}
ControlmouseOptions::ControlmouseOptions(const ControlmouseOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_click_, &from.enable_click_,
    static_cast<size_t>(reinterpret_cast<char*>(&scroll_thresh_) -
    reinterpret_cast<char*>(&enable_click_)) + sizeof(scroll_thresh_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ControlmouseOptions)
}

void ControlmouseOptions::SharedCtor() {
  ::memset(&enable_click_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_thresh_for_stability_) -
      reinterpret_cast<char*>(&enable_click_)) + sizeof(use_thresh_for_stability_));
  no_of_decimal_ = 3;
  pw_ = 0.2f;
  cw_ = 0.8f;
  click_thresh_angle_ = 85;
  make_steady_ = true;
  use_angle_for_clicking_ = true;
  dist_thresh_ = 10;
  scroll_stready_ = 3;
  scroll_thresh_ = 5;
}

ControlmouseOptions::~ControlmouseOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.ControlmouseOptions)
  SharedDtor();
}

void ControlmouseOptions::SharedDtor() {
}

void ControlmouseOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlmouseOptions& ControlmouseOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlmouseOptions_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto.base);
  return *internal_default_instance();
}


void ControlmouseOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ControlmouseOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_click_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_thresh_for_stability_) -
      reinterpret_cast<char*>(&enable_click_)) + sizeof(use_thresh_for_stability_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    no_of_decimal_ = 3;
    pw_ = 0.2f;
    cw_ = 0.8f;
    click_thresh_angle_ = 85;
  }
  if (cached_has_bits & 0x00001f00u) {
    make_steady_ = true;
    use_angle_for_clicking_ = true;
    dist_thresh_ = 10;
    scroll_stready_ = 3;
    scroll_thresh_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlmouseOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_click = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_click(&has_bits);
          enable_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_control = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_control(&has_bits);
          enable_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 no_of_decimal = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_no_of_decimal(&has_bits);
          no_of_decimal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool verbose = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_verbose(&has_bits);
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pw = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pw(&has_bits);
          pw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cw = 6 [default = 0.8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_cw(&has_bits);
          cw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool make_steady = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_make_steady(&has_bits);
          make_steady_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 click_thresh_angle = 8 [default = 85];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_click_thresh_angle(&has_bits);
          click_thresh_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_angle_for_clicking = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_use_angle_for_clicking(&has_bits);
          use_angle_for_clicking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_thresh_for_stability = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_thresh_for_stability(&has_bits);
          use_thresh_for_stability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dist_thresh = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dist_thresh(&has_bits);
          dist_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scroll_stready = 12 [default = 3];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_scroll_stready(&has_bits);
          scroll_stready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scroll_thresh = 13 [default = 5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_scroll_thresh(&has_bits);
          scroll_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlmouseOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ControlmouseOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_click = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_click(), target);
  }

  // optional bool enable_control = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_control(), target);
  }

  // optional int32 no_of_decimal = 3 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_no_of_decimal(), target);
  }

  // optional bool verbose = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_verbose(), target);
  }

  // optional float pw = 5 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pw(), target);
  }

  // optional float cw = 6 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cw(), target);
  }

  // optional bool make_steady = 7 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_make_steady(), target);
  }

  // optional int32 click_thresh_angle = 8 [default = 85];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_click_thresh_angle(), target);
  }

  // optional bool use_angle_for_clicking = 9 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_use_angle_for_clicking(), target);
  }

  // optional bool use_thresh_for_stability = 10 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_thresh_for_stability(), target);
  }

  // optional int32 dist_thresh = 11 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_dist_thresh(), target);
  }

  // optional int32 scroll_stready = 12 [default = 3];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_scroll_stready(), target);
  }

  // optional int32 scroll_thresh = 13 [default = 5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_scroll_thresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ControlmouseOptions)
  return target;
}

size_t ControlmouseOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ControlmouseOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_click = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_control = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool verbose = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_thresh_for_stability = 10 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 no_of_decimal = 3 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_no_of_decimal());
    }

    // optional float pw = 5 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float cw = 6 [default = 0.8];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 click_thresh_angle = 8 [default = 85];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_click_thresh_angle());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool make_steady = 7 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool use_angle_for_clicking = 9 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 dist_thresh = 11 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dist_thresh());
    }

    // optional int32 scroll_stready = 12 [default = 3];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scroll_stready());
    }

    // optional int32 scroll_thresh = 13 [default = 5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scroll_thresh());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlmouseOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ControlmouseOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlmouseOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlmouseOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ControlmouseOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ControlmouseOptions)
    MergeFrom(*source);
  }
}

void ControlmouseOptions::MergeFrom(const ControlmouseOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ControlmouseOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_click_ = from.enable_click_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_control_ = from.enable_control_;
    }
    if (cached_has_bits & 0x00000004u) {
      verbose_ = from.verbose_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_thresh_for_stability_ = from.use_thresh_for_stability_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_of_decimal_ = from.no_of_decimal_;
    }
    if (cached_has_bits & 0x00000020u) {
      pw_ = from.pw_;
    }
    if (cached_has_bits & 0x00000040u) {
      cw_ = from.cw_;
    }
    if (cached_has_bits & 0x00000080u) {
      click_thresh_angle_ = from.click_thresh_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      make_steady_ = from.make_steady_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_angle_for_clicking_ = from.use_angle_for_clicking_;
    }
    if (cached_has_bits & 0x00000400u) {
      dist_thresh_ = from.dist_thresh_;
    }
    if (cached_has_bits & 0x00000800u) {
      scroll_stready_ = from.scroll_stready_;
    }
    if (cached_has_bits & 0x00001000u) {
      scroll_thresh_ = from.scroll_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlmouseOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ControlmouseOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlmouseOptions::CopyFrom(const ControlmouseOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ControlmouseOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlmouseOptions::IsInitialized() const {
  return true;
}

void ControlmouseOptions::InternalSwap(ControlmouseOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_click_, other->enable_click_);
  swap(enable_control_, other->enable_control_);
  swap(verbose_, other->verbose_);
  swap(use_thresh_for_stability_, other->use_thresh_for_stability_);
  swap(no_of_decimal_, other->no_of_decimal_);
  swap(pw_, other->pw_);
  swap(cw_, other->cw_);
  swap(click_thresh_angle_, other->click_thresh_angle_);
  swap(make_steady_, other->make_steady_);
  swap(use_angle_for_clicking_, other->use_angle_for_clicking_);
  swap(dist_thresh_, other->dist_thresh_);
  swap(scroll_stready_, other->scroll_stready_);
  swap(scroll_thresh_, other->scroll_thresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlmouseOptions::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlmouseOptions::kExtFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ControlmouseOptions >, 11, false >
  ControlmouseOptions::ext(kExtFieldNumber, *::mediapipe::ControlmouseOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::ControlmouseOptions* Arena::CreateMaybeMessage< ::mediapipe::ControlmouseOptions >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::ControlmouseOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
