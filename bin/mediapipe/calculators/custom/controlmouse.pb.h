// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/custom/controlmouse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto;
namespace mediapipe {
class ControlmouseOptions;
class ControlmouseOptionsDefaultTypeInternal;
extern ControlmouseOptionsDefaultTypeInternal _ControlmouseOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::ControlmouseOptions* Arena::CreateMaybeMessage<::mediapipe::ControlmouseOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class ControlmouseOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.ControlmouseOptions) */ {
 public:
  ControlmouseOptions();
  virtual ~ControlmouseOptions();

  ControlmouseOptions(const ControlmouseOptions& from);
  ControlmouseOptions(ControlmouseOptions&& from) noexcept
    : ControlmouseOptions() {
    *this = ::std::move(from);
  }

  inline ControlmouseOptions& operator=(const ControlmouseOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlmouseOptions& operator=(ControlmouseOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlmouseOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlmouseOptions* internal_default_instance() {
    return reinterpret_cast<const ControlmouseOptions*>(
               &_ControlmouseOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlmouseOptions& a, ControlmouseOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlmouseOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlmouseOptions* New() const final {
    return CreateMaybeMessage<ControlmouseOptions>(nullptr);
  }

  ControlmouseOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlmouseOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlmouseOptions& from);
  void MergeFrom(const ControlmouseOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlmouseOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.ControlmouseOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto);
    return ::descriptor_table_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableClickFieldNumber = 1,
    kEnableControlFieldNumber = 2,
    kVerboseFieldNumber = 4,
    kUseThreshForStabilityFieldNumber = 10,
    kNoOfDecimalFieldNumber = 3,
    kPwFieldNumber = 5,
    kCwFieldNumber = 6,
    kClickThreshAngleFieldNumber = 8,
    kMakeSteadyFieldNumber = 7,
    kUseAngleForClickingFieldNumber = 9,
    kDistThreshFieldNumber = 11,
    kScrollStreadyFieldNumber = 12,
    kScrollThreshFieldNumber = 13,
  };
  // optional bool enable_click = 1 [default = false];
  bool has_enable_click() const;
  private:
  bool _internal_has_enable_click() const;
  public:
  void clear_enable_click();
  bool enable_click() const;
  void set_enable_click(bool value);
  private:
  bool _internal_enable_click() const;
  void _internal_set_enable_click(bool value);
  public:

  // optional bool enable_control = 2 [default = false];
  bool has_enable_control() const;
  private:
  bool _internal_has_enable_control() const;
  public:
  void clear_enable_control();
  bool enable_control() const;
  void set_enable_control(bool value);
  private:
  bool _internal_enable_control() const;
  void _internal_set_enable_control(bool value);
  public:

  // optional bool verbose = 4 [default = false];
  bool has_verbose() const;
  private:
  bool _internal_has_verbose() const;
  public:
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // optional bool use_thresh_for_stability = 10 [default = false];
  bool has_use_thresh_for_stability() const;
  private:
  bool _internal_has_use_thresh_for_stability() const;
  public:
  void clear_use_thresh_for_stability();
  bool use_thresh_for_stability() const;
  void set_use_thresh_for_stability(bool value);
  private:
  bool _internal_use_thresh_for_stability() const;
  void _internal_set_use_thresh_for_stability(bool value);
  public:

  // optional int32 no_of_decimal = 3 [default = 3];
  bool has_no_of_decimal() const;
  private:
  bool _internal_has_no_of_decimal() const;
  public:
  void clear_no_of_decimal();
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_decimal() const;
  void set_no_of_decimal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_no_of_decimal() const;
  void _internal_set_no_of_decimal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float pw = 5 [default = 0.2];
  bool has_pw() const;
  private:
  bool _internal_has_pw() const;
  public:
  void clear_pw();
  float pw() const;
  void set_pw(float value);
  private:
  float _internal_pw() const;
  void _internal_set_pw(float value);
  public:

  // optional float cw = 6 [default = 0.8];
  bool has_cw() const;
  private:
  bool _internal_has_cw() const;
  public:
  void clear_cw();
  float cw() const;
  void set_cw(float value);
  private:
  float _internal_cw() const;
  void _internal_set_cw(float value);
  public:

  // optional int32 click_thresh_angle = 8 [default = 85];
  bool has_click_thresh_angle() const;
  private:
  bool _internal_has_click_thresh_angle() const;
  public:
  void clear_click_thresh_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 click_thresh_angle() const;
  void set_click_thresh_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_click_thresh_angle() const;
  void _internal_set_click_thresh_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool make_steady = 7 [default = true];
  bool has_make_steady() const;
  private:
  bool _internal_has_make_steady() const;
  public:
  void clear_make_steady();
  bool make_steady() const;
  void set_make_steady(bool value);
  private:
  bool _internal_make_steady() const;
  void _internal_set_make_steady(bool value);
  public:

  // optional bool use_angle_for_clicking = 9 [default = true];
  bool has_use_angle_for_clicking() const;
  private:
  bool _internal_has_use_angle_for_clicking() const;
  public:
  void clear_use_angle_for_clicking();
  bool use_angle_for_clicking() const;
  void set_use_angle_for_clicking(bool value);
  private:
  bool _internal_use_angle_for_clicking() const;
  void _internal_set_use_angle_for_clicking(bool value);
  public:

  // optional int32 dist_thresh = 11 [default = 10];
  bool has_dist_thresh() const;
  private:
  bool _internal_has_dist_thresh() const;
  public:
  void clear_dist_thresh();
  ::PROTOBUF_NAMESPACE_ID::int32 dist_thresh() const;
  void set_dist_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dist_thresh() const;
  void _internal_set_dist_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scroll_stready = 12 [default = 3];
  bool has_scroll_stready() const;
  private:
  bool _internal_has_scroll_stready() const;
  public:
  void clear_scroll_stready();
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_stready() const;
  void set_scroll_stready(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scroll_stready() const;
  void _internal_set_scroll_stready(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scroll_thresh = 13 [default = 5];
  bool has_scroll_thresh() const;
  private:
  bool _internal_has_scroll_thresh() const;
  public:
  void clear_scroll_thresh();
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_thresh() const;
  void set_scroll_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scroll_thresh() const;
  void _internal_set_scroll_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  static const int kExtFieldNumber = 261845732;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::ControlmouseOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.ControlmouseOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enable_click_;
  bool enable_control_;
  bool verbose_;
  bool use_thresh_for_stability_;
  ::PROTOBUF_NAMESPACE_ID::int32 no_of_decimal_;
  float pw_;
  float cw_;
  ::PROTOBUF_NAMESPACE_ID::int32 click_thresh_angle_;
  bool make_steady_;
  bool use_angle_for_clicking_;
  ::PROTOBUF_NAMESPACE_ID::int32 dist_thresh_;
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_stready_;
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_thresh_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlmouseOptions

// optional bool enable_click = 1 [default = false];
inline bool ControlmouseOptions::_internal_has_enable_click() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_enable_click() const {
  return _internal_has_enable_click();
}
inline void ControlmouseOptions::clear_enable_click() {
  enable_click_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ControlmouseOptions::_internal_enable_click() const {
  return enable_click_;
}
inline bool ControlmouseOptions::enable_click() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.enable_click)
  return _internal_enable_click();
}
inline void ControlmouseOptions::_internal_set_enable_click(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enable_click_ = value;
}
inline void ControlmouseOptions::set_enable_click(bool value) {
  _internal_set_enable_click(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.enable_click)
}

// optional bool enable_control = 2 [default = false];
inline bool ControlmouseOptions::_internal_has_enable_control() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_enable_control() const {
  return _internal_has_enable_control();
}
inline void ControlmouseOptions::clear_enable_control() {
  enable_control_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ControlmouseOptions::_internal_enable_control() const {
  return enable_control_;
}
inline bool ControlmouseOptions::enable_control() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.enable_control)
  return _internal_enable_control();
}
inline void ControlmouseOptions::_internal_set_enable_control(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_control_ = value;
}
inline void ControlmouseOptions::set_enable_control(bool value) {
  _internal_set_enable_control(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.enable_control)
}

// optional int32 no_of_decimal = 3 [default = 3];
inline bool ControlmouseOptions::_internal_has_no_of_decimal() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_no_of_decimal() const {
  return _internal_has_no_of_decimal();
}
inline void ControlmouseOptions::clear_no_of_decimal() {
  no_of_decimal_ = 3;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::_internal_no_of_decimal() const {
  return no_of_decimal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::no_of_decimal() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.no_of_decimal)
  return _internal_no_of_decimal();
}
inline void ControlmouseOptions::_internal_set_no_of_decimal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  no_of_decimal_ = value;
}
inline void ControlmouseOptions::set_no_of_decimal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_no_of_decimal(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.no_of_decimal)
}

// optional bool verbose = 4 [default = false];
inline bool ControlmouseOptions::_internal_has_verbose() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_verbose() const {
  return _internal_has_verbose();
}
inline void ControlmouseOptions::clear_verbose() {
  verbose_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ControlmouseOptions::_internal_verbose() const {
  return verbose_;
}
inline bool ControlmouseOptions::verbose() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.verbose)
  return _internal_verbose();
}
inline void ControlmouseOptions::_internal_set_verbose(bool value) {
  _has_bits_[0] |= 0x00000004u;
  verbose_ = value;
}
inline void ControlmouseOptions::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.verbose)
}

// optional float pw = 5 [default = 0.2];
inline bool ControlmouseOptions::_internal_has_pw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_pw() const {
  return _internal_has_pw();
}
inline void ControlmouseOptions::clear_pw() {
  pw_ = 0.2f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ControlmouseOptions::_internal_pw() const {
  return pw_;
}
inline float ControlmouseOptions::pw() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.pw)
  return _internal_pw();
}
inline void ControlmouseOptions::_internal_set_pw(float value) {
  _has_bits_[0] |= 0x00000020u;
  pw_ = value;
}
inline void ControlmouseOptions::set_pw(float value) {
  _internal_set_pw(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.pw)
}

// optional float cw = 6 [default = 0.8];
inline bool ControlmouseOptions::_internal_has_cw() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_cw() const {
  return _internal_has_cw();
}
inline void ControlmouseOptions::clear_cw() {
  cw_ = 0.8f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ControlmouseOptions::_internal_cw() const {
  return cw_;
}
inline float ControlmouseOptions::cw() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.cw)
  return _internal_cw();
}
inline void ControlmouseOptions::_internal_set_cw(float value) {
  _has_bits_[0] |= 0x00000040u;
  cw_ = value;
}
inline void ControlmouseOptions::set_cw(float value) {
  _internal_set_cw(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.cw)
}

// optional bool make_steady = 7 [default = true];
inline bool ControlmouseOptions::_internal_has_make_steady() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_make_steady() const {
  return _internal_has_make_steady();
}
inline void ControlmouseOptions::clear_make_steady() {
  make_steady_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ControlmouseOptions::_internal_make_steady() const {
  return make_steady_;
}
inline bool ControlmouseOptions::make_steady() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.make_steady)
  return _internal_make_steady();
}
inline void ControlmouseOptions::_internal_set_make_steady(bool value) {
  _has_bits_[0] |= 0x00000100u;
  make_steady_ = value;
}
inline void ControlmouseOptions::set_make_steady(bool value) {
  _internal_set_make_steady(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.make_steady)
}

// optional int32 click_thresh_angle = 8 [default = 85];
inline bool ControlmouseOptions::_internal_has_click_thresh_angle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_click_thresh_angle() const {
  return _internal_has_click_thresh_angle();
}
inline void ControlmouseOptions::clear_click_thresh_angle() {
  click_thresh_angle_ = 85;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::_internal_click_thresh_angle() const {
  return click_thresh_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::click_thresh_angle() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.click_thresh_angle)
  return _internal_click_thresh_angle();
}
inline void ControlmouseOptions::_internal_set_click_thresh_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  click_thresh_angle_ = value;
}
inline void ControlmouseOptions::set_click_thresh_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_click_thresh_angle(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.click_thresh_angle)
}

// optional bool use_angle_for_clicking = 9 [default = true];
inline bool ControlmouseOptions::_internal_has_use_angle_for_clicking() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_use_angle_for_clicking() const {
  return _internal_has_use_angle_for_clicking();
}
inline void ControlmouseOptions::clear_use_angle_for_clicking() {
  use_angle_for_clicking_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ControlmouseOptions::_internal_use_angle_for_clicking() const {
  return use_angle_for_clicking_;
}
inline bool ControlmouseOptions::use_angle_for_clicking() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.use_angle_for_clicking)
  return _internal_use_angle_for_clicking();
}
inline void ControlmouseOptions::_internal_set_use_angle_for_clicking(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_angle_for_clicking_ = value;
}
inline void ControlmouseOptions::set_use_angle_for_clicking(bool value) {
  _internal_set_use_angle_for_clicking(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.use_angle_for_clicking)
}

// optional bool use_thresh_for_stability = 10 [default = false];
inline bool ControlmouseOptions::_internal_has_use_thresh_for_stability() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_use_thresh_for_stability() const {
  return _internal_has_use_thresh_for_stability();
}
inline void ControlmouseOptions::clear_use_thresh_for_stability() {
  use_thresh_for_stability_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ControlmouseOptions::_internal_use_thresh_for_stability() const {
  return use_thresh_for_stability_;
}
inline bool ControlmouseOptions::use_thresh_for_stability() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.use_thresh_for_stability)
  return _internal_use_thresh_for_stability();
}
inline void ControlmouseOptions::_internal_set_use_thresh_for_stability(bool value) {
  _has_bits_[0] |= 0x00000008u;
  use_thresh_for_stability_ = value;
}
inline void ControlmouseOptions::set_use_thresh_for_stability(bool value) {
  _internal_set_use_thresh_for_stability(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.use_thresh_for_stability)
}

// optional int32 dist_thresh = 11 [default = 10];
inline bool ControlmouseOptions::_internal_has_dist_thresh() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_dist_thresh() const {
  return _internal_has_dist_thresh();
}
inline void ControlmouseOptions::clear_dist_thresh() {
  dist_thresh_ = 10;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::_internal_dist_thresh() const {
  return dist_thresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::dist_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.dist_thresh)
  return _internal_dist_thresh();
}
inline void ControlmouseOptions::_internal_set_dist_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  dist_thresh_ = value;
}
inline void ControlmouseOptions::set_dist_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dist_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.dist_thresh)
}

// optional int32 scroll_stready = 12 [default = 3];
inline bool ControlmouseOptions::_internal_has_scroll_stready() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_scroll_stready() const {
  return _internal_has_scroll_stready();
}
inline void ControlmouseOptions::clear_scroll_stready() {
  scroll_stready_ = 3;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::_internal_scroll_stready() const {
  return scroll_stready_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::scroll_stready() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.scroll_stready)
  return _internal_scroll_stready();
}
inline void ControlmouseOptions::_internal_set_scroll_stready(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  scroll_stready_ = value;
}
inline void ControlmouseOptions::set_scroll_stready(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scroll_stready(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.scroll_stready)
}

// optional int32 scroll_thresh = 13 [default = 5];
inline bool ControlmouseOptions::_internal_has_scroll_thresh() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ControlmouseOptions::has_scroll_thresh() const {
  return _internal_has_scroll_thresh();
}
inline void ControlmouseOptions::clear_scroll_thresh() {
  scroll_thresh_ = 5;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::_internal_scroll_thresh() const {
  return scroll_thresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlmouseOptions::scroll_thresh() const {
  // @@protoc_insertion_point(field_get:mediapipe.ControlmouseOptions.scroll_thresh)
  return _internal_scroll_thresh();
}
inline void ControlmouseOptions::_internal_set_scroll_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  scroll_thresh_ = value;
}
inline void ControlmouseOptions::set_scroll_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scroll_thresh(value);
  // @@protoc_insertion_point(field_set:mediapipe.ControlmouseOptions.scroll_thresh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2fcustom_2fcontrolmouse_2eproto
