// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/detection_label_id_to_text_calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mediapipe/framework/calculator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto;
namespace mediapipe {
class DetectionLabelIdToTextCalculatorOptions;
class DetectionLabelIdToTextCalculatorOptionsDefaultTypeInternal;
extern DetectionLabelIdToTextCalculatorOptionsDefaultTypeInternal _DetectionLabelIdToTextCalculatorOptions_default_instance_;
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::DetectionLabelIdToTextCalculatorOptions* Arena::CreateMaybeMessage<::mediapipe::DetectionLabelIdToTextCalculatorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {

// ===================================================================

class DetectionLabelIdToTextCalculatorOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.DetectionLabelIdToTextCalculatorOptions) */ {
 public:
  DetectionLabelIdToTextCalculatorOptions();
  virtual ~DetectionLabelIdToTextCalculatorOptions();

  DetectionLabelIdToTextCalculatorOptions(const DetectionLabelIdToTextCalculatorOptions& from);
  DetectionLabelIdToTextCalculatorOptions(DetectionLabelIdToTextCalculatorOptions&& from) noexcept
    : DetectionLabelIdToTextCalculatorOptions() {
    *this = ::std::move(from);
  }

  inline DetectionLabelIdToTextCalculatorOptions& operator=(const DetectionLabelIdToTextCalculatorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionLabelIdToTextCalculatorOptions& operator=(DetectionLabelIdToTextCalculatorOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionLabelIdToTextCalculatorOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionLabelIdToTextCalculatorOptions* internal_default_instance() {
    return reinterpret_cast<const DetectionLabelIdToTextCalculatorOptions*>(
               &_DetectionLabelIdToTextCalculatorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectionLabelIdToTextCalculatorOptions& a, DetectionLabelIdToTextCalculatorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionLabelIdToTextCalculatorOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionLabelIdToTextCalculatorOptions* New() const final {
    return CreateMaybeMessage<DetectionLabelIdToTextCalculatorOptions>(nullptr);
  }

  DetectionLabelIdToTextCalculatorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionLabelIdToTextCalculatorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionLabelIdToTextCalculatorOptions& from);
  void MergeFrom(const DetectionLabelIdToTextCalculatorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionLabelIdToTextCalculatorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.DetectionLabelIdToTextCalculatorOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto);
    return ::descriptor_table_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kLabelMapPathFieldNumber = 1,
  };
  // repeated string label = 2;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  const std::string& label(int index) const;
  std::string* mutable_label(int index);
  void set_label(int index, const std::string& value);
  void set_label(int index, std::string&& value);
  void set_label(int index, const char* value);
  void set_label(int index, const char* value, size_t size);
  std::string* add_label();
  void add_label(const std::string& value);
  void add_label(std::string&& value);
  void add_label(const char* value);
  void add_label(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_label();
  private:
  const std::string& _internal_label(int index) const;
  std::string* _internal_add_label();
  public:

  // optional string label_map_path = 1;
  bool has_label_map_path() const;
  private:
  bool _internal_has_label_map_path() const;
  public:
  void clear_label_map_path();
  const std::string& label_map_path() const;
  void set_label_map_path(const std::string& value);
  void set_label_map_path(std::string&& value);
  void set_label_map_path(const char* value);
  void set_label_map_path(const char* value, size_t size);
  std::string* mutable_label_map_path();
  std::string* release_label_map_path();
  void set_allocated_label_map_path(std::string* label_map_path);
  private:
  const std::string& _internal_label_map_path() const;
  void _internal_set_label_map_path(const std::string& value);
  std::string* _internal_mutable_label_map_path();
  public:

  static const int kExtFieldNumber = 251889072;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::DetectionLabelIdToTextCalculatorOptions >, 11, false >
    ext;
  // @@protoc_insertion_point(class_scope:mediapipe.DetectionLabelIdToTextCalculatorOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_map_path_;
  friend struct ::TableStruct_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectionLabelIdToTextCalculatorOptions

// optional string label_map_path = 1;
inline bool DetectionLabelIdToTextCalculatorOptions::_internal_has_label_map_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectionLabelIdToTextCalculatorOptions::has_label_map_path() const {
  return _internal_has_label_map_path();
}
inline void DetectionLabelIdToTextCalculatorOptions::clear_label_map_path() {
  label_map_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectionLabelIdToTextCalculatorOptions::label_map_path() const {
  // @@protoc_insertion_point(field_get:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
  return _internal_label_map_path();
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label_map_path(const std::string& value) {
  _internal_set_label_map_path(value);
  // @@protoc_insertion_point(field_set:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::mutable_label_map_path() {
  // @@protoc_insertion_point(field_mutable:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
  return _internal_mutable_label_map_path();
}
inline const std::string& DetectionLabelIdToTextCalculatorOptions::_internal_label_map_path() const {
  return label_map_path_.GetNoArena();
}
inline void DetectionLabelIdToTextCalculatorOptions::_internal_set_label_map_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label_map_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label_map_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label_map_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_map_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::_internal_mutable_label_map_path() {
  _has_bits_[0] |= 0x00000001u;
  return label_map_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::release_label_map_path() {
  // @@protoc_insertion_point(field_release:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
  if (!_internal_has_label_map_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_map_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionLabelIdToTextCalculatorOptions::set_allocated_label_map_path(std::string* label_map_path) {
  if (label_map_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_map_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label_map_path);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.DetectionLabelIdToTextCalculatorOptions.label_map_path)
}

// repeated string label = 2;
inline int DetectionLabelIdToTextCalculatorOptions::_internal_label_size() const {
  return label_.size();
}
inline int DetectionLabelIdToTextCalculatorOptions::label_size() const {
  return _internal_label_size();
}
inline void DetectionLabelIdToTextCalculatorOptions::clear_label() {
  label_.Clear();
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::add_label() {
  // @@protoc_insertion_point(field_add_mutable:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  return _internal_add_label();
}
inline const std::string& DetectionLabelIdToTextCalculatorOptions::_internal_label(int index) const {
  return label_.Get(index);
}
inline const std::string& DetectionLabelIdToTextCalculatorOptions::label(int index) const {
  // @@protoc_insertion_point(field_get:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  return _internal_label(index);
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  return label_.Mutable(index);
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  label_.Mutable(index)->assign(value);
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  label_.Mutable(index)->assign(std::move(value));
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline void DetectionLabelIdToTextCalculatorOptions::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline std::string* DetectionLabelIdToTextCalculatorOptions::_internal_add_label() {
  return label_.Add();
}
inline void DetectionLabelIdToTextCalculatorOptions::add_label(const std::string& value) {
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline void DetectionLabelIdToTextCalculatorOptions::add_label(std::string&& value) {
  label_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline void DetectionLabelIdToTextCalculatorOptions::add_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline void DetectionLabelIdToTextCalculatorOptions::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DetectionLabelIdToTextCalculatorOptions::label() const {
  // @@protoc_insertion_point(field_list:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DetectionLabelIdToTextCalculatorOptions::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.DetectionLabelIdToTextCalculatorOptions.label)
  return &label_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fcalculators_2futil_2fdetection_5flabel_5fid_5fto_5ftext_5fcalculator_2eproto
