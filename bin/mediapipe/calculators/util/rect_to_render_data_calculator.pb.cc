// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/calculators/util/rect_to_render_data_calculator.proto

#include "mediapipe/calculators/util/rect_to_render_data_calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2fcolor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_mediapipe_2futil_2fcolor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto;
namespace mediapipe {
class RectToRenderDataCalculatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RectToRenderDataCalculatorOptions> _instance;
} _RectToRenderDataCalculatorOptions_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_RectToRenderDataCalculatorOptions_default_instance_;
    new (ptr) ::mediapipe::RectToRenderDataCalculatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::RectToRenderDataCalculatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto}, {
      &scc_info_Color_mediapipe_2futil_2fcolor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectToRenderDataCalculatorOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectToRenderDataCalculatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectToRenderDataCalculatorOptions, filled_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectToRenderDataCalculatorOptions, color_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::RectToRenderDataCalculatorOptions, thickness_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::RectToRenderDataCalculatorOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_RectToRenderDataCalculatorOptions_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?mediapipe/calculators/util/rect_to_ren"
  "der_data_calculator.proto\022\tmediapipe\032$me"
  "diapipe/framework/calculator.proto\032\032medi"
  "apipe/util/color.proto\"\306\001\n!RectToRenderD"
  "ataCalculatorOptions\022\016\n\006filled\030\001 \001(\010\022\037\n\005"
  "color\030\002 \001(\0132\020.mediapipe.Color\022\024\n\tthickne"
  "ss\030\003 \001(\001:\00112Z\n\003ext\022\034.mediapipe.Calculato"
  "rOptions\030\254\333\207} \001(\0132,.mediapipe.RectToRend"
  "erDataCalculatorOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fcalculator_2eproto,
  &::descriptor_table_mediapipe_2futil_2fcolor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_sccs[1] = {
  &scc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_once;
static bool descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto = {
  &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_initialized, descriptor_table_protodef_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto, "mediapipe/calculators/util/rect_to_render_data_calculator.proto", 343,
  &descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_once, descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_sccs, descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto, 1, file_level_enum_descriptors_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto), true);
namespace mediapipe {

// ===================================================================

void RectToRenderDataCalculatorOptions::InitAsDefaultInstance() {
  ::mediapipe::_RectToRenderDataCalculatorOptions_default_instance_._instance.get_mutable()->color_ = const_cast< ::mediapipe::Color*>(
      ::mediapipe::Color::internal_default_instance());
}
class RectToRenderDataCalculatorOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<RectToRenderDataCalculatorOptions>()._has_bits_);
  static void set_has_filled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mediapipe::Color& color(const RectToRenderDataCalculatorOptions* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mediapipe::Color&
RectToRenderDataCalculatorOptions::_Internal::color(const RectToRenderDataCalculatorOptions* msg) {
  return *msg->color_;
}
void RectToRenderDataCalculatorOptions::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RectToRenderDataCalculatorOptions::RectToRenderDataCalculatorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.RectToRenderDataCalculatorOptions)
}
RectToRenderDataCalculatorOptions::RectToRenderDataCalculatorOptions(const RectToRenderDataCalculatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::mediapipe::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&filled_, &from.filled_,
    static_cast<size_t>(reinterpret_cast<char*>(&thickness_) -
    reinterpret_cast<char*>(&filled_)) + sizeof(thickness_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.RectToRenderDataCalculatorOptions)
}

void RectToRenderDataCalculatorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filled_) -
      reinterpret_cast<char*>(&color_)) + sizeof(filled_));
  thickness_ = 1;
}

RectToRenderDataCalculatorOptions::~RectToRenderDataCalculatorOptions() {
  // @@protoc_insertion_point(destructor:mediapipe.RectToRenderDataCalculatorOptions)
  SharedDtor();
}

void RectToRenderDataCalculatorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void RectToRenderDataCalculatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectToRenderDataCalculatorOptions& RectToRenderDataCalculatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RectToRenderDataCalculatorOptions_mediapipe_2fcalculators_2futil_2frect_5fto_5frender_5fdata_5fcalculator_2eproto.base);
  return *internal_default_instance();
}


void RectToRenderDataCalculatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.RectToRenderDataCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    filled_ = false;
    thickness_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RectToRenderDataCalculatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool filled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_filled(&has_bits);
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mediapipe.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double thickness = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_thickness(&has_bits);
          thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectToRenderDataCalculatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.RectToRenderDataCalculatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool filled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_filled(), target);
  }

  // optional .mediapipe.Color color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  // optional double thickness = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_thickness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.RectToRenderDataCalculatorOptions)
  return target;
}

size_t RectToRenderDataCalculatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.RectToRenderDataCalculatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mediapipe.Color color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional bool filled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double thickness = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectToRenderDataCalculatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.RectToRenderDataCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RectToRenderDataCalculatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectToRenderDataCalculatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.RectToRenderDataCalculatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.RectToRenderDataCalculatorOptions)
    MergeFrom(*source);
  }
}

void RectToRenderDataCalculatorOptions::MergeFrom(const RectToRenderDataCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.RectToRenderDataCalculatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::mediapipe::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      filled_ = from.filled_;
    }
    if (cached_has_bits & 0x00000004u) {
      thickness_ = from.thickness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RectToRenderDataCalculatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.RectToRenderDataCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectToRenderDataCalculatorOptions::CopyFrom(const RectToRenderDataCalculatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.RectToRenderDataCalculatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectToRenderDataCalculatorOptions::IsInitialized() const {
  return true;
}

void RectToRenderDataCalculatorOptions::InternalSwap(RectToRenderDataCalculatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
  swap(filled_, other->filled_);
  swap(thickness_, other->thickness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RectToRenderDataCalculatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectToRenderDataCalculatorOptions::kExtFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::mediapipe::CalculatorOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::mediapipe::RectToRenderDataCalculatorOptions >, 11, false >
  RectToRenderDataCalculatorOptions::ext(kExtFieldNumber, *::mediapipe::RectToRenderDataCalculatorOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::RectToRenderDataCalculatorOptions* Arena::CreateMaybeMessage< ::mediapipe::RectToRenderDataCalculatorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::RectToRenderDataCalculatorOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
