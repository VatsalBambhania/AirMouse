// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/util/color.proto

#include "mediapipe/util/color.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2fcolor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_mediapipe_2futil_2fcolor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2futil_2fcolor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto;
namespace mediapipe {
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class ColorMap_LabelToColorEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorMap_LabelToColorEntry_DoNotUse> _instance;
} _ColorMap_LabelToColorEntry_DoNotUse_default_instance_;
class ColorMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorMap> _instance;
} _ColorMap_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_Color_mediapipe_2futil_2fcolor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Color_default_instance_;
    new (ptr) ::mediapipe::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_mediapipe_2futil_2fcolor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_mediapipe_2futil_2fcolor_2eproto}, {}};

static void InitDefaultsscc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_ColorMap_default_instance_;
    new (ptr) ::mediapipe::ColorMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::ColorMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto}, {
      &scc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto.base,}};

static void InitDefaultsscc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_ColorMap_LabelToColorEntry_DoNotUse_default_instance_;
    new (ptr) ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse();
  }
  ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto}, {
      &scc_info_Color_mediapipe_2futil_2fcolor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2futil_2fcolor_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::Color, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::Color, r_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Color, g_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::Color, b_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ColorMap, label_to_color_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::Color)},
  { 11, 18, sizeof(::mediapipe::ColorMap_LabelToColorEntry_DoNotUse)},
  { 20, 26, sizeof(::mediapipe::ColorMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ColorMap_LabelToColorEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ColorMap_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2futil_2fcolor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mediapipe/util/color.proto\022\tmediapipe\""
  "(\n\005Color\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001("
  "\005\"\220\001\n\010ColorMap\022=\n\016label_to_color\030\001 \003(\0132%"
  ".mediapipe.ColorMap.LabelToColorEntry\032E\n"
  "\021LabelToColorEntry\022\013\n\003key\030\001 \001(\t\022\037\n\005value"
  "\030\002 \001(\0132\020.mediapipe.Color:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2futil_2fcolor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2futil_2fcolor_2eproto_sccs[3] = {
  &scc_info_Color_mediapipe_2futil_2fcolor_2eproto.base,
  &scc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto.base,
  &scc_info_ColorMap_LabelToColorEntry_DoNotUse_mediapipe_2futil_2fcolor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2futil_2fcolor_2eproto_once;
static bool descriptor_table_mediapipe_2futil_2fcolor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2futil_2fcolor_2eproto = {
  &descriptor_table_mediapipe_2futil_2fcolor_2eproto_initialized, descriptor_table_protodef_mediapipe_2futil_2fcolor_2eproto, "mediapipe/util/color.proto", 228,
  &descriptor_table_mediapipe_2futil_2fcolor_2eproto_once, descriptor_table_mediapipe_2futil_2fcolor_2eproto_sccs, descriptor_table_mediapipe_2futil_2fcolor_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_mediapipe_2futil_2fcolor_2eproto::offsets,
  file_level_metadata_mediapipe_2futil_2fcolor_2eproto, 3, file_level_enum_descriptors_mediapipe_2futil_2fcolor_2eproto, file_level_service_descriptors_mediapipe_2futil_2fcolor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2futil_2fcolor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2futil_2fcolor_2eproto), true);
namespace mediapipe {

// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
  using HasBits = decltype(std::declval<Color>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Color)
}

void Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:mediapipe.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_mediapipe_2futil_2fcolor_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_r());
    }

    // optional int32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_g());
    }

    // optional int32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_b());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ColorMap_LabelToColorEntry_DoNotUse::ColorMap_LabelToColorEntry_DoNotUse() {}
ColorMap_LabelToColorEntry_DoNotUse::ColorMap_LabelToColorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ColorMap_LabelToColorEntry_DoNotUse::MergeFrom(const ColorMap_LabelToColorEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ColorMap_LabelToColorEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ColorMap_LabelToColorEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ColorMap::InitAsDefaultInstance() {
}
class ColorMap::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorMap>()._has_bits_);
};

ColorMap::ColorMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.ColorMap)
}
ColorMap::ColorMap(const ColorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_to_color_.MergeFrom(from.label_to_color_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.ColorMap)
}

void ColorMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto.base);
}

ColorMap::~ColorMap() {
  // @@protoc_insertion_point(destructor:mediapipe.ColorMap)
  SharedDtor();
}

void ColorMap::SharedDtor() {
}

void ColorMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorMap& ColorMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorMap_mediapipe_2futil_2fcolor_2eproto.base);
  return *internal_default_instance();
}


void ColorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ColorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_to_color_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ColorMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .mediapipe.Color> label_to_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&label_to_color_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ColorMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mediapipe.Color> label_to_color = 1;
  if (!this->_internal_label_to_color().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mediapipe::Color >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "mediapipe.ColorMap.LabelToColorEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_label_to_color().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_label_to_color().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mediapipe::Color >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mediapipe::Color >::const_iterator
          it = this->_internal_label_to_color().begin();
          it != this->_internal_label_to_color().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ColorMap_LabelToColorEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mediapipe::Color >::const_iterator
          it = this->_internal_label_to_color().begin();
          it != this->_internal_label_to_color().end(); ++it) {
        target = ColorMap_LabelToColorEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ColorMap)
  return target;
}

size_t ColorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ColorMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mediapipe.Color> label_to_color = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_to_color_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mediapipe::Color >::const_iterator
      it = this->_internal_label_to_color().begin();
      it != this->_internal_label_to_color().end(); ++it) {
    total_size += ColorMap_LabelToColorEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ColorMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ColorMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ColorMap)
    MergeFrom(*source);
  }
}

void ColorMap::MergeFrom(const ColorMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ColorMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_to_color_.MergeFrom(from.label_to_color_);
}

void ColorMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ColorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorMap::CopyFrom(const ColorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ColorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorMap::IsInitialized() const {
  return true;
}

void ColorMap::InternalSwap(ColorMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_to_color_.Swap(&other->label_to_color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::Color* Arena::CreateMaybeMessage< ::mediapipe::Color >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse* Arena::CreateMaybeMessage< ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::ColorMap_LabelToColorEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ColorMap* Arena::CreateMaybeMessage< ::mediapipe::ColorMap >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::ColorMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
