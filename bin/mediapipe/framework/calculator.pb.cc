// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/calculator.proto

#include "mediapipe/framework/calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculatorOptions_mediapipe_2fframework_2fcalculator_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstream_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fmediapipe_5foptions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaPipeOptions_mediapipe_2fframework_2fmediapipe_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstream_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OutputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fpacket_5ffactory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PacketFactoryConfig_mediapipe_2fframework_2fpacket_5ffactory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fpacket_5fgenerator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PacketGeneratorConfig_mediapipe_2fframework_2fpacket_5fgenerator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fcalculator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstatus_5fhandler_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusHandlerConfig_mediapipe_2fframework_2fstatus_5fhandler_2eproto;
namespace mediapipe {
class ExecutorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutorConfig> _instance;
} _ExecutorConfig_default_instance_;
class InputCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputCollection> _instance;
} _InputCollection_default_instance_;
class InputCollectionSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputCollectionSet> _instance;
} _InputCollectionSet_default_instance_;
class InputStreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputStreamInfo> _instance;
} _InputStreamInfo_default_instance_;
class ProfilerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilerConfig> _instance;
} _ProfilerConfig_default_instance_;
class CalculatorGraphConfig_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculatorGraphConfig_Node> _instance;
} _CalculatorGraphConfig_Node_default_instance_;
class CalculatorGraphConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculatorGraphConfig> _instance;
} _CalculatorGraphConfig_default_instance_;
}  // namespace mediapipe
static void InitDefaultsscc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_CalculatorGraphConfig_default_instance_;
    new (ptr) ::mediapipe::CalculatorGraphConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::CalculatorGraphConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto}, {
      &scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto.base,
      &scc_info_PacketFactoryConfig_mediapipe_2fframework_2fpacket_5ffactory_2eproto.base,
      &scc_info_PacketGeneratorConfig_mediapipe_2fframework_2fpacket_5fgenerator_2eproto.base,
      &scc_info_StatusHandlerConfig_mediapipe_2fframework_2fstatus_5fhandler_2eproto.base,
      &scc_info_InputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto.base,
      &scc_info_OutputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto.base,
      &scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto.base,
      &scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto.base,
      &scc_info_MediaPipeOptions_mediapipe_2fframework_2fmediapipe_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_CalculatorGraphConfig_Node_default_instance_;
    new (ptr) ::mediapipe::CalculatorGraphConfig_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::CalculatorGraphConfig_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto}, {
      &scc_info_CalculatorOptions_mediapipe_2fframework_2fcalculator_5foptions_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_InputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto.base,
      &scc_info_OutputStreamHandlerConfig_mediapipe_2fframework_2fstream_5fhandler_2eproto.base,
      &scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto.base,
      &scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto.base,}};

static void InitDefaultsscc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_ExecutorConfig_default_instance_;
    new (ptr) ::mediapipe::ExecutorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::ExecutorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto}, {
      &scc_info_MediaPipeOptions_mediapipe_2fframework_2fmediapipe_5foptions_2eproto.base,}};

static void InitDefaultsscc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_InputCollection_default_instance_;
    new (ptr) ::mediapipe::InputCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::InputCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto}, {}};

static void InitDefaultsscc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_InputCollectionSet_default_instance_;
    new (ptr) ::mediapipe::InputCollectionSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::InputCollectionSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto}, {
      &scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto.base,}};

static void InitDefaultsscc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_InputStreamInfo_default_instance_;
    new (ptr) ::mediapipe::InputStreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::InputStreamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto}, {}};

static void InitDefaultsscc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_ProfilerConfig_default_instance_;
    new (ptr) ::mediapipe::ProfilerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::ProfilerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fframework_2fcalculator_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fframework_2fcalculator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fframework_2fcalculator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediapipe_2fframework_2fcalculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ExecutorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ExecutorConfig, name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ExecutorConfig, type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ExecutorConfig, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, side_packet_name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, external_input_name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, input_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollection, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollectionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputCollectionSet, input_collection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputStreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputStreamInfo, tag_index_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::InputStreamInfo, back_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, histogram_interval_size_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, num_histogram_intervals_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, enable_input_output_latency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, enable_profiler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, enable_stream_latency_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, use_packet_timestamp_for_added_packet_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_capacity_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_event_types_disabled_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_path_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_interval_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_margin_usec_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_duration_events_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_interval_count_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_log_disabled_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ProfilerConfig, trace_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, name_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, calculator_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, input_stream_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, output_stream_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, input_side_packet_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, output_side_packet_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, node_options_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, source_layer_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, buffer_size_hint_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, input_stream_handler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, output_stream_handler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, input_stream_info_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, executor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, profiler_config_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, max_in_flight_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig_Node, external_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, node_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, packet_factory_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, packet_generator_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, num_threads_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, status_handler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, input_stream_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, output_stream_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, input_side_packet_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, output_side_packet_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, max_queue_size_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, report_deadlock_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, input_stream_handler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, output_stream_handler_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, executor_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, profiler_config_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, package_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::CalculatorGraphConfig, options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mediapipe::ExecutorConfig)},
  { 8, -1, sizeof(::mediapipe::InputCollection)},
  { 18, -1, sizeof(::mediapipe::InputCollectionSet)},
  { 24, -1, sizeof(::mediapipe::InputStreamInfo)},
  { 31, -1, sizeof(::mediapipe::ProfilerConfig)},
  { 52, -1, sizeof(::mediapipe::CalculatorGraphConfig_Node)},
  { 74, -1, sizeof(::mediapipe::CalculatorGraphConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ExecutorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_InputCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_InputCollectionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_InputStreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ProfilerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_CalculatorGraphConfig_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_CalculatorGraphConfig_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fframework_2fcalculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$mediapipe/framework/calculator.proto\022\t"
  "mediapipe\032,mediapipe/framework/calculato"
  "r_options.proto\032\031google/protobuf/any.pro"
  "to\032+mediapipe/framework/mediapipe_option"
  "s.proto\032(mediapipe/framework/packet_fact"
  "ory.proto\032*mediapipe/framework/packet_ge"
  "nerator.proto\032(mediapipe/framework/statu"
  "s_handler.proto\032(mediapipe/framework/str"
  "eam_handler.proto\"Z\n\016ExecutorConfig\022\014\n\004n"
  "ame\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022,\n\007options\030\003 \001(\013"
  "2\033.mediapipe.MediaPipeOptions\"\221\002\n\017InputC"
  "ollection\022\014\n\004name\030\001 \001(\t\022\030\n\020side_packet_n"
  "ame\030\002 \003(\t\022\034\n\023external_input_name\030\352\007 \003(\t\022"
  "8\n\ninput_type\030\003 \001(\0162$.mediapipe.InputCol"
  "lection.InputType\022\021\n\tfile_name\030\004 \001(\t\"k\n\t"
  "InputType\022\013\n\007UNKNOWN\020\000\022\014\n\010RECORDIO\020\001\022\024\n\020"
  "FOREIGN_RECORDIO\020\002\022\024\n\020FOREIGN_CSV_TEXT\020\003"
  "\022\027\n\023INVALID_UPPER_BOUND\020\004\"J\n\022InputCollec"
  "tionSet\0224\n\020input_collection\030\001 \003(\0132\032.medi"
  "apipe.InputCollection\"7\n\017InputStreamInfo"
  "\022\021\n\ttag_index\030\001 \001(\t\022\021\n\tback_edge\030\002 \001(\010\"\220"
  "\004\n\016ProfilerConfig\022$\n\034histogram_interval_"
  "size_usec\030\001 \001(\003\022\037\n\027num_histogram_interva"
  "ls\030\002 \001(\003\022\'\n\033enable_input_output_latency\030"
  "\003 \001(\010B\002\030\001\022\027\n\017enable_profiler\030\004 \001(\010\022\035\n\025en"
  "able_stream_latency\030\005 \001(\010\022-\n%use_packet_"
  "timestamp_for_added_packet\030\006 \001(\010\022\032\n\022trac"
  "e_log_capacity\030\007 \001(\003\022\"\n\032trace_event_type"
  "s_disabled\030\010 \003(\005\022\026\n\016trace_log_path\030\t \001(\t"
  "\022\027\n\017trace_log_count\030\n \001(\005\022\037\n\027trace_log_i"
  "nterval_usec\030\013 \001(\003\022\035\n\025trace_log_margin_u"
  "sec\030\014 \001(\003\022!\n\031trace_log_duration_events\030\r"
  " \001(\010\022 \n\030trace_log_interval_count\030\016 \001(\005\022\032"
  "\n\022trace_log_disabled\030\017 \001(\010\022\025\n\rtrace_enab"
  "led\030\020 \001(\010\"\254\n\n\025CalculatorGraphConfig\0223\n\004n"
  "ode\030\001 \003(\0132%.mediapipe.CalculatorGraphCon"
  "fig.Node\0226\n\016packet_factory\030\006 \003(\0132\036.media"
  "pipe.PacketFactoryConfig\022:\n\020packet_gener"
  "ator\030\007 \003(\0132 .mediapipe.PacketGeneratorCo"
  "nfig\022\023\n\013num_threads\030\010 \001(\005\0226\n\016status_hand"
  "ler\030\t \003(\0132\036.mediapipe.StatusHandlerConfi"
  "g\022\024\n\014input_stream\030\n \003(\t\022\025\n\routput_stream"
  "\030\017 \003(\t\022\031\n\021input_side_packet\030\020 \003(\t\022\032\n\022out"
  "put_side_packet\030\021 \003(\t\022\026\n\016max_queue_size\030"
  "\013 \001(\005\022\027\n\017report_deadlock\030\025 \001(\010\022A\n\024input_"
  "stream_handler\030\014 \001(\0132#.mediapipe.InputSt"
  "reamHandlerConfig\022C\n\025output_stream_handl"
  "er\030\r \001(\0132$.mediapipe.OutputStreamHandler"
  "Config\022+\n\010executor\030\016 \003(\0132\031.mediapipe.Exe"
  "cutorConfig\0222\n\017profiler_config\030\022 \001(\0132\031.m"
  "ediapipe.ProfilerConfig\022\017\n\007package\030\023 \001(\t"
  "\022\014\n\004type\030\024 \001(\t\022-\n\007options\030\351\007 \001(\0132\033.media"
  "pipe.MediaPipeOptions\032\320\004\n\004Node\022\014\n\004name\030\001"
  " \001(\t\022\022\n\ncalculator\030\002 \001(\t\022\024\n\014input_stream"
  "\030\003 \003(\t\022\025\n\routput_stream\030\004 \003(\t\022\031\n\021input_s"
  "ide_packet\030\005 \003(\t\022\032\n\022output_side_packet\030\006"
  " \003(\t\022-\n\007options\030\007 \001(\0132\034.mediapipe.Calcul"
  "atorOptions\022*\n\014node_options\030\010 \003(\0132\024.goog"
  "le.protobuf.Any\022\024\n\014source_layer\030\t \001(\005\022\030\n"
  "\020buffer_size_hint\030\n \001(\005\022A\n\024input_stream_"
  "handler\030\013 \001(\0132#.mediapipe.InputStreamHan"
  "dlerConfig\022C\n\025output_stream_handler\030\014 \001("
  "\0132$.mediapipe.OutputStreamHandlerConfig\022"
  "5\n\021input_stream_info\030\r \003(\0132\032.mediapipe.I"
  "nputStreamInfo\022\020\n\010executor\030\016 \001(\t\0226\n\017prof"
  "iler_config\030\017 \001(\0132\031.mediapipe.ProfilerCo"
  "nfigB\002\030\001\022\025\n\rmax_in_flight\030\020 \001(\005\022\027\n\016exter"
  "nal_input\030\355\007 \003(\tB-\n\032com.google.mediapipe"
  ".protoB\017CalculatorProtoP\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_deps[7] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fcalculator_5foptions_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fmediapipe_5foptions_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fpacket_5ffactory_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fpacket_5fgenerator_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fstatus_5fhandler_2eproto,
  &::descriptor_table_mediapipe_2fframework_2fstream_5fhandler_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_sccs[7] = {
  &scc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto.base,
  &scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_once;
static bool descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fcalculator_2eproto = {
  &descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_initialized, descriptor_table_protodef_mediapipe_2fframework_2fcalculator_2eproto, "mediapipe/framework/calculator.proto", 2753,
  &descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_once, descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_sccs, descriptor_table_mediapipe_2fframework_2fcalculator_2eproto_deps, 7, 7,
  schemas, file_default_instances, TableStruct_mediapipe_2fframework_2fcalculator_2eproto::offsets,
  file_level_metadata_mediapipe_2fframework_2fcalculator_2eproto, 7, file_level_enum_descriptors_mediapipe_2fframework_2fcalculator_2eproto, file_level_service_descriptors_mediapipe_2fframework_2fcalculator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediapipe_2fframework_2fcalculator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediapipe_2fframework_2fcalculator_2eproto), true);
namespace mediapipe {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputCollection_InputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fframework_2fcalculator_2eproto);
  return file_level_enum_descriptors_mediapipe_2fframework_2fcalculator_2eproto[0];
}
bool InputCollection_InputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InputCollection_InputType InputCollection::UNKNOWN;
constexpr InputCollection_InputType InputCollection::RECORDIO;
constexpr InputCollection_InputType InputCollection::FOREIGN_RECORDIO;
constexpr InputCollection_InputType InputCollection::FOREIGN_CSV_TEXT;
constexpr InputCollection_InputType InputCollection::INVALID_UPPER_BOUND;
constexpr InputCollection_InputType InputCollection::InputType_MIN;
constexpr InputCollection_InputType InputCollection::InputType_MAX;
constexpr int InputCollection::InputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ExecutorConfig::InitAsDefaultInstance() {
  ::mediapipe::_ExecutorConfig_default_instance_._instance.get_mutable()->options_ = const_cast< ::mediapipe::MediaPipeOptions*>(
      ::mediapipe::MediaPipeOptions::internal_default_instance());
}
class ExecutorConfig::_Internal {
 public:
  static const ::mediapipe::MediaPipeOptions& options(const ExecutorConfig* msg);
};

const ::mediapipe::MediaPipeOptions&
ExecutorConfig::_Internal::options(const ExecutorConfig* msg) {
  return *msg->options_;
}
void ExecutorConfig::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
ExecutorConfig::ExecutorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.ExecutorConfig)
}
ExecutorConfig::ExecutorConfig(const ExecutorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_options()) {
    options_ = new ::mediapipe::MediaPipeOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.ExecutorConfig)
}

void ExecutorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

ExecutorConfig::~ExecutorConfig() {
  // @@protoc_insertion_point(destructor:mediapipe.ExecutorConfig)
  SharedDtor();
}

void ExecutorConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void ExecutorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutorConfig& ExecutorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutorConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void ExecutorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ExecutorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ExecutorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.ExecutorConfig.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.ExecutorConfig.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.MediaPipeOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ExecutorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.ExecutorConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.ExecutorConfig.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .mediapipe.MediaPipeOptions options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ExecutorConfig)
  return target;
}

size_t ExecutorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ExecutorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .mediapipe.MediaPipeOptions options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ExecutorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ExecutorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ExecutorConfig)
    MergeFrom(*source);
  }
}

void ExecutorConfig::MergeFrom(const ExecutorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ExecutorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::mediapipe::MediaPipeOptions::MergeFrom(from._internal_options());
  }
}

void ExecutorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ExecutorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorConfig::CopyFrom(const ExecutorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ExecutorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorConfig::IsInitialized() const {
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void ExecutorConfig::InternalSwap(ExecutorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputCollection::InitAsDefaultInstance() {
}
class InputCollection::_Internal {
 public:
};

InputCollection::InputCollection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.InputCollection)
}
InputCollection::InputCollection(const InputCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      side_packet_name_(from.side_packet_name_),
      external_input_name_(from.external_input_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  input_type_ = from.input_type_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.InputCollection)
}

void InputCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_type_ = 0;
}

InputCollection::~InputCollection() {
  // @@protoc_insertion_point(destructor:mediapipe.InputCollection)
  SharedDtor();
}

void InputCollection::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputCollection& InputCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputCollection_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void InputCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.InputCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  side_packet_name_.Clear();
  external_input_name_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_type_ = 0;
  _internal_metadata_.Clear();
}

const char* InputCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.InputCollection.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string side_packet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_side_packet_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.InputCollection.side_packet_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .mediapipe.InputCollection.InputType input_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_input_type(static_cast<::mediapipe::InputCollection_InputType>(val));
        } else goto handle_unusual;
        continue;
      // string file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.InputCollection.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string external_input_name = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_external_input_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.InputCollection.external_input_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8018>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.InputCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.InputCollection.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string side_packet_name = 2;
  for (int i = 0, n = this->_internal_side_packet_name_size(); i < n; i++) {
    const auto& s = this->_internal_side_packet_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.InputCollection.side_packet_name");
    target = stream->WriteString(2, s, target);
  }

  // .mediapipe.InputCollection.InputType input_type = 3;
  if (this->input_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_input_type(), target);
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.InputCollection.file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_name(), target);
  }

  // repeated string external_input_name = 1002;
  for (int i = 0, n = this->_internal_external_input_name_size(); i < n; i++) {
    const auto& s = this->_internal_external_input_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.InputCollection.external_input_name");
    target = stream->WriteString(1002, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.InputCollection)
  return target;
}

size_t InputCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.InputCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string side_packet_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(side_packet_name_.size());
  for (int i = 0, n = side_packet_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      side_packet_name_.Get(i));
  }

  // repeated string external_input_name = 1002;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_input_name_.size());
  for (int i = 0, n = external_input_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_input_name_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // .mediapipe.InputCollection.InputType input_type = 3;
  if (this->input_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.InputCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const InputCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.InputCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.InputCollection)
    MergeFrom(*source);
  }
}

void InputCollection::MergeFrom(const InputCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.InputCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  side_packet_name_.MergeFrom(from.side_packet_name_);
  external_input_name_.MergeFrom(from.external_input_name_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.input_type() != 0) {
    _internal_set_input_type(from._internal_input_type());
  }
}

void InputCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.InputCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputCollection::CopyFrom(const InputCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.InputCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCollection::IsInitialized() const {
  return true;
}

void InputCollection::InternalSwap(InputCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  side_packet_name_.InternalSwap(&other->side_packet_name_);
  external_input_name_.InternalSwap(&other->external_input_name_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_type_, other->input_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputCollectionSet::InitAsDefaultInstance() {
}
class InputCollectionSet::_Internal {
 public:
};

InputCollectionSet::InputCollectionSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.InputCollectionSet)
}
InputCollectionSet::InputCollectionSet(const InputCollectionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_collection_(from.input_collection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.InputCollectionSet)
}

void InputCollectionSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto.base);
}

InputCollectionSet::~InputCollectionSet() {
  // @@protoc_insertion_point(destructor:mediapipe.InputCollectionSet)
  SharedDtor();
}

void InputCollectionSet::SharedDtor() {
}

void InputCollectionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputCollectionSet& InputCollectionSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputCollectionSet_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void InputCollectionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.InputCollectionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_collection_.Clear();
  _internal_metadata_.Clear();
}

const char* InputCollectionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.InputCollection input_collection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_collection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputCollectionSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.InputCollectionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.InputCollection input_collection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_collection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_input_collection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.InputCollectionSet)
  return target;
}

size_t InputCollectionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.InputCollectionSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.InputCollection input_collection = 1;
  total_size += 1UL * this->_internal_input_collection_size();
  for (const auto& msg : this->input_collection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputCollectionSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.InputCollectionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const InputCollectionSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputCollectionSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.InputCollectionSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.InputCollectionSet)
    MergeFrom(*source);
  }
}

void InputCollectionSet::MergeFrom(const InputCollectionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.InputCollectionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_collection_.MergeFrom(from.input_collection_);
}

void InputCollectionSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.InputCollectionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputCollectionSet::CopyFrom(const InputCollectionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.InputCollectionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCollectionSet::IsInitialized() const {
  return true;
}

void InputCollectionSet::InternalSwap(InputCollectionSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_collection_.InternalSwap(&other->input_collection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCollectionSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputStreamInfo::InitAsDefaultInstance() {
}
class InputStreamInfo::_Internal {
 public:
};

InputStreamInfo::InputStreamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.InputStreamInfo)
}
InputStreamInfo::InputStreamInfo(const InputStreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag_index().empty()) {
    tag_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_index_);
  }
  back_edge_ = from.back_edge_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.InputStreamInfo)
}

void InputStreamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto.base);
  tag_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_edge_ = false;
}

InputStreamInfo::~InputStreamInfo() {
  // @@protoc_insertion_point(destructor:mediapipe.InputStreamInfo)
  SharedDtor();
}

void InputStreamInfo::SharedDtor() {
  tag_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputStreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputStreamInfo& InputStreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputStreamInfo_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void InputStreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.InputStreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  back_edge_ = false;
  _internal_metadata_.Clear();
}

const char* InputStreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.InputStreamInfo.tag_index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool back_edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          back_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputStreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.InputStreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag_index = 1;
  if (this->tag_index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag_index().data(), static_cast<int>(this->_internal_tag_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.InputStreamInfo.tag_index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag_index(), target);
  }

  // bool back_edge = 2;
  if (this->back_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_back_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.InputStreamInfo)
  return target;
}

size_t InputStreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.InputStreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag_index = 1;
  if (this->tag_index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_index());
  }

  // bool back_edge = 2;
  if (this->back_edge() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputStreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.InputStreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InputStreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputStreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.InputStreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.InputStreamInfo)
    MergeFrom(*source);
  }
}

void InputStreamInfo::MergeFrom(const InputStreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.InputStreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag_index().size() > 0) {

    tag_index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_index_);
  }
  if (from.back_edge() != 0) {
    _internal_set_back_edge(from._internal_back_edge());
  }
}

void InputStreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.InputStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputStreamInfo::CopyFrom(const InputStreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.InputStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputStreamInfo::IsInitialized() const {
  return true;
}

void InputStreamInfo::InternalSwap(InputStreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_index_.Swap(&other->tag_index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(back_edge_, other->back_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputStreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfilerConfig::InitAsDefaultInstance() {
}
class ProfilerConfig::_Internal {
 public:
};

ProfilerConfig::ProfilerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.ProfilerConfig)
}
ProfilerConfig::ProfilerConfig(const ProfilerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trace_event_types_disabled_(from.trace_event_types_disabled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_log_path().empty()) {
    trace_log_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_log_path_);
  }
  ::memcpy(&histogram_interval_size_usec_, &from.histogram_interval_size_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_enabled_) -
    reinterpret_cast<char*>(&histogram_interval_size_usec_)) + sizeof(trace_enabled_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ProfilerConfig)
}

void ProfilerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  trace_log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&histogram_interval_size_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_enabled_) -
      reinterpret_cast<char*>(&histogram_interval_size_usec_)) + sizeof(trace_enabled_));
}

ProfilerConfig::~ProfilerConfig() {
  // @@protoc_insertion_point(destructor:mediapipe.ProfilerConfig)
  SharedDtor();
}

void ProfilerConfig::SharedDtor() {
  trace_log_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfilerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilerConfig& ProfilerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilerConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void ProfilerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ProfilerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_event_types_disabled_.Clear();
  trace_log_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&histogram_interval_size_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_enabled_) -
      reinterpret_cast<char*>(&histogram_interval_size_usec_)) + sizeof(trace_enabled_));
  _internal_metadata_.Clear();
}

const char* ProfilerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 histogram_interval_size_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          histogram_interval_size_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_histogram_intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_histogram_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_input_output_latency = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_input_output_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_profiler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_profiler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_stream_latency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_stream_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_packet_timestamp_for_added_packet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_packet_timestamp_for_added_packet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trace_log_capacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          trace_log_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 trace_event_types_disabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_trace_event_types_disabled(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_trace_event_types_disabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_log_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_trace_log_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.ProfilerConfig.trace_log_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trace_log_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          trace_log_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trace_log_interval_usec = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          trace_log_interval_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 trace_log_margin_usec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          trace_log_margin_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_log_duration_events = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          trace_log_duration_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trace_log_interval_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          trace_log_interval_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_log_disabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          trace_log_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_enabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          trace_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ProfilerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 histogram_interval_size_usec = 1;
  if (this->histogram_interval_size_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_histogram_interval_size_usec(), target);
  }

  // int64 num_histogram_intervals = 2;
  if (this->num_histogram_intervals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_histogram_intervals(), target);
  }

  // bool enable_input_output_latency = 3 [deprecated = true];
  if (this->enable_input_output_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_input_output_latency(), target);
  }

  // bool enable_profiler = 4;
  if (this->enable_profiler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_profiler(), target);
  }

  // bool enable_stream_latency = 5;
  if (this->enable_stream_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_stream_latency(), target);
  }

  // bool use_packet_timestamp_for_added_packet = 6;
  if (this->use_packet_timestamp_for_added_packet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_packet_timestamp_for_added_packet(), target);
  }

  // int64 trace_log_capacity = 7;
  if (this->trace_log_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_trace_log_capacity(), target);
  }

  // repeated int32 trace_event_types_disabled = 8;
  {
    int byte_size = _trace_event_types_disabled_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_trace_event_types_disabled(), byte_size, target);
    }
  }

  // string trace_log_path = 9;
  if (this->trace_log_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_log_path().data(), static_cast<int>(this->_internal_trace_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.ProfilerConfig.trace_log_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_trace_log_path(), target);
  }

  // int32 trace_log_count = 10;
  if (this->trace_log_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_trace_log_count(), target);
  }

  // int64 trace_log_interval_usec = 11;
  if (this->trace_log_interval_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_trace_log_interval_usec(), target);
  }

  // int64 trace_log_margin_usec = 12;
  if (this->trace_log_margin_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_trace_log_margin_usec(), target);
  }

  // bool trace_log_duration_events = 13;
  if (this->trace_log_duration_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_trace_log_duration_events(), target);
  }

  // int32 trace_log_interval_count = 14;
  if (this->trace_log_interval_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_trace_log_interval_count(), target);
  }

  // bool trace_log_disabled = 15;
  if (this->trace_log_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_trace_log_disabled(), target);
  }

  // bool trace_enabled = 16;
  if (this->trace_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_trace_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ProfilerConfig)
  return target;
}

size_t ProfilerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ProfilerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 trace_event_types_disabled = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->trace_event_types_disabled_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _trace_event_types_disabled_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string trace_log_path = 9;
  if (this->trace_log_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_log_path());
  }

  // int64 histogram_interval_size_usec = 1;
  if (this->histogram_interval_size_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_histogram_interval_size_usec());
  }

  // int64 num_histogram_intervals = 2;
  if (this->num_histogram_intervals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_histogram_intervals());
  }

  // bool enable_input_output_latency = 3 [deprecated = true];
  if (this->enable_input_output_latency() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_profiler = 4;
  if (this->enable_profiler() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_stream_latency = 5;
  if (this->enable_stream_latency() != 0) {
    total_size += 1 + 1;
  }

  // bool use_packet_timestamp_for_added_packet = 6;
  if (this->use_packet_timestamp_for_added_packet() != 0) {
    total_size += 1 + 1;
  }

  // int32 trace_log_count = 10;
  if (this->trace_log_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trace_log_count());
  }

  // int64 trace_log_capacity = 7;
  if (this->trace_log_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trace_log_capacity());
  }

  // int64 trace_log_interval_usec = 11;
  if (this->trace_log_interval_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trace_log_interval_usec());
  }

  // int64 trace_log_margin_usec = 12;
  if (this->trace_log_margin_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_trace_log_margin_usec());
  }

  // int32 trace_log_interval_count = 14;
  if (this->trace_log_interval_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trace_log_interval_count());
  }

  // bool trace_log_duration_events = 13;
  if (this->trace_log_duration_events() != 0) {
    total_size += 1 + 1;
  }

  // bool trace_log_disabled = 15;
  if (this->trace_log_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool trace_enabled = 16;
  if (this->trace_enabled() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.ProfilerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfilerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.ProfilerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.ProfilerConfig)
    MergeFrom(*source);
  }
}

void ProfilerConfig::MergeFrom(const ProfilerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ProfilerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_event_types_disabled_.MergeFrom(from.trace_event_types_disabled_);
  if (from.trace_log_path().size() > 0) {

    trace_log_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_log_path_);
  }
  if (from.histogram_interval_size_usec() != 0) {
    _internal_set_histogram_interval_size_usec(from._internal_histogram_interval_size_usec());
  }
  if (from.num_histogram_intervals() != 0) {
    _internal_set_num_histogram_intervals(from._internal_num_histogram_intervals());
  }
  if (from.enable_input_output_latency() != 0) {
    _internal_set_enable_input_output_latency(from._internal_enable_input_output_latency());
  }
  if (from.enable_profiler() != 0) {
    _internal_set_enable_profiler(from._internal_enable_profiler());
  }
  if (from.enable_stream_latency() != 0) {
    _internal_set_enable_stream_latency(from._internal_enable_stream_latency());
  }
  if (from.use_packet_timestamp_for_added_packet() != 0) {
    _internal_set_use_packet_timestamp_for_added_packet(from._internal_use_packet_timestamp_for_added_packet());
  }
  if (from.trace_log_count() != 0) {
    _internal_set_trace_log_count(from._internal_trace_log_count());
  }
  if (from.trace_log_capacity() != 0) {
    _internal_set_trace_log_capacity(from._internal_trace_log_capacity());
  }
  if (from.trace_log_interval_usec() != 0) {
    _internal_set_trace_log_interval_usec(from._internal_trace_log_interval_usec());
  }
  if (from.trace_log_margin_usec() != 0) {
    _internal_set_trace_log_margin_usec(from._internal_trace_log_margin_usec());
  }
  if (from.trace_log_interval_count() != 0) {
    _internal_set_trace_log_interval_count(from._internal_trace_log_interval_count());
  }
  if (from.trace_log_duration_events() != 0) {
    _internal_set_trace_log_duration_events(from._internal_trace_log_duration_events());
  }
  if (from.trace_log_disabled() != 0) {
    _internal_set_trace_log_disabled(from._internal_trace_log_disabled());
  }
  if (from.trace_enabled() != 0) {
    _internal_set_trace_enabled(from._internal_trace_enabled());
  }
}

void ProfilerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.ProfilerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilerConfig::CopyFrom(const ProfilerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ProfilerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilerConfig::IsInitialized() const {
  return true;
}

void ProfilerConfig::InternalSwap(ProfilerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trace_event_types_disabled_.InternalSwap(&other->trace_event_types_disabled_);
  trace_log_path_.Swap(&other->trace_log_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(histogram_interval_size_usec_, other->histogram_interval_size_usec_);
  swap(num_histogram_intervals_, other->num_histogram_intervals_);
  swap(enable_input_output_latency_, other->enable_input_output_latency_);
  swap(enable_profiler_, other->enable_profiler_);
  swap(enable_stream_latency_, other->enable_stream_latency_);
  swap(use_packet_timestamp_for_added_packet_, other->use_packet_timestamp_for_added_packet_);
  swap(trace_log_count_, other->trace_log_count_);
  swap(trace_log_capacity_, other->trace_log_capacity_);
  swap(trace_log_interval_usec_, other->trace_log_interval_usec_);
  swap(trace_log_margin_usec_, other->trace_log_margin_usec_);
  swap(trace_log_interval_count_, other->trace_log_interval_count_);
  swap(trace_log_duration_events_, other->trace_log_duration_events_);
  swap(trace_log_disabled_, other->trace_log_disabled_);
  swap(trace_enabled_, other->trace_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfilerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculatorGraphConfig_Node::InitAsDefaultInstance() {
  ::mediapipe::_CalculatorGraphConfig_Node_default_instance_._instance.get_mutable()->options_ = const_cast< ::mediapipe::CalculatorOptions*>(
      ::mediapipe::CalculatorOptions::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_Node_default_instance_._instance.get_mutable()->input_stream_handler_ = const_cast< ::mediapipe::InputStreamHandlerConfig*>(
      ::mediapipe::InputStreamHandlerConfig::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_Node_default_instance_._instance.get_mutable()->output_stream_handler_ = const_cast< ::mediapipe::OutputStreamHandlerConfig*>(
      ::mediapipe::OutputStreamHandlerConfig::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_Node_default_instance_._instance.get_mutable()->profiler_config_ = const_cast< ::mediapipe::ProfilerConfig*>(
      ::mediapipe::ProfilerConfig::internal_default_instance());
}
class CalculatorGraphConfig_Node::_Internal {
 public:
  static const ::mediapipe::CalculatorOptions& options(const CalculatorGraphConfig_Node* msg);
  static const ::mediapipe::InputStreamHandlerConfig& input_stream_handler(const CalculatorGraphConfig_Node* msg);
  static const ::mediapipe::OutputStreamHandlerConfig& output_stream_handler(const CalculatorGraphConfig_Node* msg);
  static const ::mediapipe::ProfilerConfig& profiler_config(const CalculatorGraphConfig_Node* msg);
};

const ::mediapipe::CalculatorOptions&
CalculatorGraphConfig_Node::_Internal::options(const CalculatorGraphConfig_Node* msg) {
  return *msg->options_;
}
const ::mediapipe::InputStreamHandlerConfig&
CalculatorGraphConfig_Node::_Internal::input_stream_handler(const CalculatorGraphConfig_Node* msg) {
  return *msg->input_stream_handler_;
}
const ::mediapipe::OutputStreamHandlerConfig&
CalculatorGraphConfig_Node::_Internal::output_stream_handler(const CalculatorGraphConfig_Node* msg) {
  return *msg->output_stream_handler_;
}
const ::mediapipe::ProfilerConfig&
CalculatorGraphConfig_Node::_Internal::profiler_config(const CalculatorGraphConfig_Node* msg) {
  return *msg->profiler_config_;
}
void CalculatorGraphConfig_Node::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
void CalculatorGraphConfig_Node::clear_node_options() {
  node_options_.Clear();
}
void CalculatorGraphConfig_Node::clear_input_stream_handler() {
  if (GetArenaNoVirtual() == nullptr && input_stream_handler_ != nullptr) {
    delete input_stream_handler_;
  }
  input_stream_handler_ = nullptr;
}
void CalculatorGraphConfig_Node::clear_output_stream_handler() {
  if (GetArenaNoVirtual() == nullptr && output_stream_handler_ != nullptr) {
    delete output_stream_handler_;
  }
  output_stream_handler_ = nullptr;
}
CalculatorGraphConfig_Node::CalculatorGraphConfig_Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.CalculatorGraphConfig.Node)
}
CalculatorGraphConfig_Node::CalculatorGraphConfig_Node(const CalculatorGraphConfig_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_stream_(from.input_stream_),
      output_stream_(from.output_stream_),
      input_side_packet_(from.input_side_packet_),
      output_side_packet_(from.output_side_packet_),
      node_options_(from.node_options_),
      input_stream_info_(from.input_stream_info_),
      external_input_(from.external_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  calculator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_calculator().empty()) {
    calculator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calculator_);
  }
  executor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executor().empty()) {
    executor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executor_);
  }
  if (from._internal_has_options()) {
    options_ = new ::mediapipe::CalculatorOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_input_stream_handler()) {
    input_stream_handler_ = new ::mediapipe::InputStreamHandlerConfig(*from.input_stream_handler_);
  } else {
    input_stream_handler_ = nullptr;
  }
  if (from._internal_has_output_stream_handler()) {
    output_stream_handler_ = new ::mediapipe::OutputStreamHandlerConfig(*from.output_stream_handler_);
  } else {
    output_stream_handler_ = nullptr;
  }
  if (from._internal_has_profiler_config()) {
    profiler_config_ = new ::mediapipe::ProfilerConfig(*from.profiler_config_);
  } else {
    profiler_config_ = nullptr;
  }
  ::memcpy(&source_layer_, &from.source_layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_in_flight_) -
    reinterpret_cast<char*>(&source_layer_)) + sizeof(max_in_flight_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.CalculatorGraphConfig.Node)
}

void CalculatorGraphConfig_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calculator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_in_flight_) -
      reinterpret_cast<char*>(&options_)) + sizeof(max_in_flight_));
}

CalculatorGraphConfig_Node::~CalculatorGraphConfig_Node() {
  // @@protoc_insertion_point(destructor:mediapipe.CalculatorGraphConfig.Node)
  SharedDtor();
}

void CalculatorGraphConfig_Node::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calculator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete input_stream_handler_;
  if (this != internal_default_instance()) delete output_stream_handler_;
  if (this != internal_default_instance()) delete profiler_config_;
}

void CalculatorGraphConfig_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculatorGraphConfig_Node& CalculatorGraphConfig_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculatorGraphConfig_Node_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void CalculatorGraphConfig_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.CalculatorGraphConfig.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_stream_.Clear();
  output_stream_.Clear();
  input_side_packet_.Clear();
  output_side_packet_.Clear();
  node_options_.Clear();
  input_stream_info_.Clear();
  external_input_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calculator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_stream_handler_ != nullptr) {
    delete input_stream_handler_;
  }
  input_stream_handler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_stream_handler_ != nullptr) {
    delete output_stream_handler_;
  }
  output_stream_handler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && profiler_config_ != nullptr) {
    delete profiler_config_;
  }
  profiler_config_ = nullptr;
  ::memset(&source_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_in_flight_) -
      reinterpret_cast<char*>(&source_layer_)) + sizeof(max_in_flight_));
  _internal_metadata_.Clear();
}

const char* CalculatorGraphConfig_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string calculator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_calculator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.calculator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string input_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_stream();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.input_stream"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_stream();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.output_stream"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_side_packet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_side_packet();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.input_side_packet"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_side_packet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_side_packet();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.output_side_packet"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .mediapipe.CalculatorOptions options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any node_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 source_layer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          source_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffer_size_hint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          buffer_size_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.InputStreamHandlerConfig input_stream_handler = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_stream_handler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_stream_handler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.InputStreamInfo input_stream_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_stream_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // string executor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_executor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.executor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.ProfilerConfig profiler_config = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_profiler_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_in_flight = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          max_in_flight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string external_input = 1005;
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_external_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.Node.external_input"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8042>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculatorGraphConfig_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.CalculatorGraphConfig.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string calculator = 2;
  if (this->calculator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_calculator().data(), static_cast<int>(this->_internal_calculator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.calculator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_calculator(), target);
  }

  // repeated string input_stream = 3;
  for (int i = 0, n = this->_internal_input_stream_size(); i < n; i++) {
    const auto& s = this->_internal_input_stream(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.input_stream");
    target = stream->WriteString(3, s, target);
  }

  // repeated string output_stream = 4;
  for (int i = 0, n = this->_internal_output_stream_size(); i < n; i++) {
    const auto& s = this->_internal_output_stream(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.output_stream");
    target = stream->WriteString(4, s, target);
  }

  // repeated string input_side_packet = 5;
  for (int i = 0, n = this->_internal_input_side_packet_size(); i < n; i++) {
    const auto& s = this->_internal_input_side_packet(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.input_side_packet");
    target = stream->WriteString(5, s, target);
  }

  // repeated string output_side_packet = 6;
  for (int i = 0, n = this->_internal_output_side_packet_size(); i < n; i++) {
    const auto& s = this->_internal_output_side_packet(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.output_side_packet");
    target = stream->WriteString(6, s, target);
  }

  // .mediapipe.CalculatorOptions options = 7;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::options(this), target, stream);
  }

  // repeated .google.protobuf.Any node_options = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_node_options(i), target, stream);
  }

  // int32 source_layer = 9;
  if (this->source_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_source_layer(), target);
  }

  // int32 buffer_size_hint = 10;
  if (this->buffer_size_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_buffer_size_hint(), target);
  }

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 11;
  if (this->has_input_stream_handler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::input_stream_handler(this), target, stream);
  }

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 12;
  if (this->has_output_stream_handler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::output_stream_handler(this), target, stream);
  }

  // repeated .mediapipe.InputStreamInfo input_stream_info = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_stream_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_input_stream_info(i), target, stream);
  }

  // string executor = 14;
  if (this->executor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executor().data(), static_cast<int>(this->_internal_executor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.executor");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_executor(), target);
  }

  // .mediapipe.ProfilerConfig profiler_config = 15 [deprecated = true];
  if (this->has_profiler_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::profiler_config(this), target, stream);
  }

  // int32 max_in_flight = 16;
  if (this->max_in_flight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_max_in_flight(), target);
  }

  // repeated string external_input = 1005;
  for (int i = 0, n = this->_internal_external_input_size(); i < n; i++) {
    const auto& s = this->_internal_external_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.Node.external_input");
    target = stream->WriteString(1005, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.CalculatorGraphConfig.Node)
  return target;
}

size_t CalculatorGraphConfig_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.CalculatorGraphConfig.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_stream = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_stream_.size());
  for (int i = 0, n = input_stream_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_stream_.Get(i));
  }

  // repeated string output_stream = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_stream_.size());
  for (int i = 0, n = output_stream_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_stream_.Get(i));
  }

  // repeated string input_side_packet = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_side_packet_.size());
  for (int i = 0, n = input_side_packet_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_side_packet_.Get(i));
  }

  // repeated string output_side_packet = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_side_packet_.size());
  for (int i = 0, n = output_side_packet_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_side_packet_.Get(i));
  }

  // repeated .google.protobuf.Any node_options = 8;
  total_size += 1UL * this->_internal_node_options_size();
  for (const auto& msg : this->node_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.InputStreamInfo input_stream_info = 13;
  total_size += 1UL * this->_internal_input_stream_info_size();
  for (const auto& msg : this->input_stream_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string external_input = 1005;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(external_input_.size());
  for (int i = 0, n = external_input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      external_input_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string calculator = 2;
  if (this->calculator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_calculator());
  }

  // string executor = 14;
  if (this->executor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executor());
  }

  // .mediapipe.CalculatorOptions options = 7;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 11;
  if (this->has_input_stream_handler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_stream_handler_);
  }

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 12;
  if (this->has_output_stream_handler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_stream_handler_);
  }

  // .mediapipe.ProfilerConfig profiler_config = 15 [deprecated = true];
  if (this->has_profiler_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profiler_config_);
  }

  // int32 source_layer = 9;
  if (this->source_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_layer());
  }

  // int32 buffer_size_hint = 10;
  if (this->buffer_size_hint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_size_hint());
  }

  // int32 max_in_flight = 16;
  if (this->max_in_flight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_in_flight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculatorGraphConfig_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.CalculatorGraphConfig.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculatorGraphConfig_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculatorGraphConfig_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.CalculatorGraphConfig.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.CalculatorGraphConfig.Node)
    MergeFrom(*source);
  }
}

void CalculatorGraphConfig_Node::MergeFrom(const CalculatorGraphConfig_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.CalculatorGraphConfig.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_stream_.MergeFrom(from.input_stream_);
  output_stream_.MergeFrom(from.output_stream_);
  input_side_packet_.MergeFrom(from.input_side_packet_);
  output_side_packet_.MergeFrom(from.output_side_packet_);
  node_options_.MergeFrom(from.node_options_);
  input_stream_info_.MergeFrom(from.input_stream_info_);
  external_input_.MergeFrom(from.external_input_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.calculator().size() > 0) {

    calculator_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calculator_);
  }
  if (from.executor().size() > 0) {

    executor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executor_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::mediapipe::CalculatorOptions::MergeFrom(from._internal_options());
  }
  if (from.has_input_stream_handler()) {
    _internal_mutable_input_stream_handler()->::mediapipe::InputStreamHandlerConfig::MergeFrom(from._internal_input_stream_handler());
  }
  if (from.has_output_stream_handler()) {
    _internal_mutable_output_stream_handler()->::mediapipe::OutputStreamHandlerConfig::MergeFrom(from._internal_output_stream_handler());
  }
  if (from.has_profiler_config()) {
    _internal_mutable_profiler_config()->::mediapipe::ProfilerConfig::MergeFrom(from._internal_profiler_config());
  }
  if (from.source_layer() != 0) {
    _internal_set_source_layer(from._internal_source_layer());
  }
  if (from.buffer_size_hint() != 0) {
    _internal_set_buffer_size_hint(from._internal_buffer_size_hint());
  }
  if (from.max_in_flight() != 0) {
    _internal_set_max_in_flight(from._internal_max_in_flight());
  }
}

void CalculatorGraphConfig_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.CalculatorGraphConfig.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorGraphConfig_Node::CopyFrom(const CalculatorGraphConfig_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.CalculatorGraphConfig.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorGraphConfig_Node::IsInitialized() const {
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  if (_internal_has_input_stream_handler()) {
    if (!input_stream_handler_->IsInitialized()) return false;
  }
  if (_internal_has_output_stream_handler()) {
    if (!output_stream_handler_->IsInitialized()) return false;
  }
  return true;
}

void CalculatorGraphConfig_Node::InternalSwap(CalculatorGraphConfig_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_stream_.InternalSwap(&other->input_stream_);
  output_stream_.InternalSwap(&other->output_stream_);
  input_side_packet_.InternalSwap(&other->input_side_packet_);
  output_side_packet_.InternalSwap(&other->output_side_packet_);
  node_options_.InternalSwap(&other->node_options_);
  input_stream_info_.InternalSwap(&other->input_stream_info_);
  external_input_.InternalSwap(&other->external_input_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  calculator_.Swap(&other->calculator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  executor_.Swap(&other->executor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(input_stream_handler_, other->input_stream_handler_);
  swap(output_stream_handler_, other->output_stream_handler_);
  swap(profiler_config_, other->profiler_config_);
  swap(source_layer_, other->source_layer_);
  swap(buffer_size_hint_, other->buffer_size_hint_);
  swap(max_in_flight_, other->max_in_flight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculatorGraphConfig_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculatorGraphConfig::InitAsDefaultInstance() {
  ::mediapipe::_CalculatorGraphConfig_default_instance_._instance.get_mutable()->input_stream_handler_ = const_cast< ::mediapipe::InputStreamHandlerConfig*>(
      ::mediapipe::InputStreamHandlerConfig::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_default_instance_._instance.get_mutable()->output_stream_handler_ = const_cast< ::mediapipe::OutputStreamHandlerConfig*>(
      ::mediapipe::OutputStreamHandlerConfig::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_default_instance_._instance.get_mutable()->profiler_config_ = const_cast< ::mediapipe::ProfilerConfig*>(
      ::mediapipe::ProfilerConfig::internal_default_instance());
  ::mediapipe::_CalculatorGraphConfig_default_instance_._instance.get_mutable()->options_ = const_cast< ::mediapipe::MediaPipeOptions*>(
      ::mediapipe::MediaPipeOptions::internal_default_instance());
}
class CalculatorGraphConfig::_Internal {
 public:
  static const ::mediapipe::InputStreamHandlerConfig& input_stream_handler(const CalculatorGraphConfig* msg);
  static const ::mediapipe::OutputStreamHandlerConfig& output_stream_handler(const CalculatorGraphConfig* msg);
  static const ::mediapipe::ProfilerConfig& profiler_config(const CalculatorGraphConfig* msg);
  static const ::mediapipe::MediaPipeOptions& options(const CalculatorGraphConfig* msg);
};

const ::mediapipe::InputStreamHandlerConfig&
CalculatorGraphConfig::_Internal::input_stream_handler(const CalculatorGraphConfig* msg) {
  return *msg->input_stream_handler_;
}
const ::mediapipe::OutputStreamHandlerConfig&
CalculatorGraphConfig::_Internal::output_stream_handler(const CalculatorGraphConfig* msg) {
  return *msg->output_stream_handler_;
}
const ::mediapipe::ProfilerConfig&
CalculatorGraphConfig::_Internal::profiler_config(const CalculatorGraphConfig* msg) {
  return *msg->profiler_config_;
}
const ::mediapipe::MediaPipeOptions&
CalculatorGraphConfig::_Internal::options(const CalculatorGraphConfig* msg) {
  return *msg->options_;
}
void CalculatorGraphConfig::clear_packet_factory() {
  packet_factory_.Clear();
}
void CalculatorGraphConfig::clear_packet_generator() {
  packet_generator_.Clear();
}
void CalculatorGraphConfig::clear_status_handler() {
  status_handler_.Clear();
}
void CalculatorGraphConfig::clear_input_stream_handler() {
  if (GetArenaNoVirtual() == nullptr && input_stream_handler_ != nullptr) {
    delete input_stream_handler_;
  }
  input_stream_handler_ = nullptr;
}
void CalculatorGraphConfig::clear_output_stream_handler() {
  if (GetArenaNoVirtual() == nullptr && output_stream_handler_ != nullptr) {
    delete output_stream_handler_;
  }
  output_stream_handler_ = nullptr;
}
void CalculatorGraphConfig::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
CalculatorGraphConfig::CalculatorGraphConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.CalculatorGraphConfig)
}
CalculatorGraphConfig::CalculatorGraphConfig(const CalculatorGraphConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_(from.node_),
      packet_factory_(from.packet_factory_),
      packet_generator_(from.packet_generator_),
      status_handler_(from.status_handler_),
      input_stream_(from.input_stream_),
      executor_(from.executor_),
      output_stream_(from.output_stream_),
      input_side_packet_(from.input_side_packet_),
      output_side_packet_(from.output_side_packet_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_package().empty()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_input_stream_handler()) {
    input_stream_handler_ = new ::mediapipe::InputStreamHandlerConfig(*from.input_stream_handler_);
  } else {
    input_stream_handler_ = nullptr;
  }
  if (from._internal_has_output_stream_handler()) {
    output_stream_handler_ = new ::mediapipe::OutputStreamHandlerConfig(*from.output_stream_handler_);
  } else {
    output_stream_handler_ = nullptr;
  }
  if (from._internal_has_profiler_config()) {
    profiler_config_ = new ::mediapipe::ProfilerConfig(*from.profiler_config_);
  } else {
    profiler_config_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::mediapipe::MediaPipeOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&num_threads_, &from.num_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_deadlock_) -
    reinterpret_cast<char*>(&num_threads_)) + sizeof(report_deadlock_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.CalculatorGraphConfig)
}

void CalculatorGraphConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_stream_handler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_deadlock_) -
      reinterpret_cast<char*>(&input_stream_handler_)) + sizeof(report_deadlock_));
}

CalculatorGraphConfig::~CalculatorGraphConfig() {
  // @@protoc_insertion_point(destructor:mediapipe.CalculatorGraphConfig)
  SharedDtor();
}

void CalculatorGraphConfig::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_stream_handler_;
  if (this != internal_default_instance()) delete output_stream_handler_;
  if (this != internal_default_instance()) delete profiler_config_;
  if (this != internal_default_instance()) delete options_;
}

void CalculatorGraphConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculatorGraphConfig& CalculatorGraphConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculatorGraphConfig_mediapipe_2fframework_2fcalculator_2eproto.base);
  return *internal_default_instance();
}


void CalculatorGraphConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.CalculatorGraphConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  packet_factory_.Clear();
  packet_generator_.Clear();
  status_handler_.Clear();
  input_stream_.Clear();
  executor_.Clear();
  output_stream_.Clear();
  input_side_packet_.Clear();
  output_side_packet_.Clear();
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && input_stream_handler_ != nullptr) {
    delete input_stream_handler_;
  }
  input_stream_handler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_stream_handler_ != nullptr) {
    delete output_stream_handler_;
  }
  output_stream_handler_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && profiler_config_ != nullptr) {
    delete profiler_config_;
  }
  profiler_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  ::memset(&num_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_deadlock_) -
      reinterpret_cast<char*>(&num_threads_)) + sizeof(report_deadlock_));
  _internal_metadata_.Clear();
}

const char* CalculatorGraphConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mediapipe.CalculatorGraphConfig.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.PacketFactoryConfig packet_factory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet_factory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.PacketGeneratorConfig packet_generator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet_generator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 num_threads = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.StatusHandlerConfig status_handler = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status_handler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_stream = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_stream();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.input_stream"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 max_queue_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.InputStreamHandlerConfig input_stream_handler = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_stream_handler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_stream_handler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mediapipe.ExecutorConfig executor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_executor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_stream = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_stream();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.output_stream"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input_side_packet = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_input_side_packet();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.input_side_packet"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_side_packet = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_output_side_packet();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.output_side_packet"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // .mediapipe.ProfilerConfig profiler_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_profiler_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_package();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.package"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mediapipe.CalculatorGraphConfig.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool report_deadlock = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          report_deadlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mediapipe.MediaPipeOptions options = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculatorGraphConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.CalculatorGraphConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.CalculatorGraphConfig.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  // repeated .mediapipe.PacketFactoryConfig packet_factory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packet_factory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_packet_factory(i), target, stream);
  }

  // repeated .mediapipe.PacketGeneratorConfig packet_generator = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packet_generator_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_packet_generator(i), target, stream);
  }

  // int32 num_threads = 8;
  if (this->num_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_threads(), target);
  }

  // repeated .mediapipe.StatusHandlerConfig status_handler = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_status_handler_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_status_handler(i), target, stream);
  }

  // repeated string input_stream = 10;
  for (int i = 0, n = this->_internal_input_stream_size(); i < n; i++) {
    const auto& s = this->_internal_input_stream(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.input_stream");
    target = stream->WriteString(10, s, target);
  }

  // int32 max_queue_size = 11;
  if (this->max_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_queue_size(), target);
  }

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 12;
  if (this->has_input_stream_handler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::input_stream_handler(this), target, stream);
  }

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 13;
  if (this->has_output_stream_handler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::output_stream_handler(this), target, stream);
  }

  // repeated .mediapipe.ExecutorConfig executor = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_executor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_executor(i), target, stream);
  }

  // repeated string output_stream = 15;
  for (int i = 0, n = this->_internal_output_stream_size(); i < n; i++) {
    const auto& s = this->_internal_output_stream(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.output_stream");
    target = stream->WriteString(15, s, target);
  }

  // repeated string input_side_packet = 16;
  for (int i = 0, n = this->_internal_input_side_packet_size(); i < n; i++) {
    const auto& s = this->_internal_input_side_packet(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.input_side_packet");
    target = stream->WriteString(16, s, target);
  }

  // repeated string output_side_packet = 17;
  for (int i = 0, n = this->_internal_output_side_packet_size(); i < n; i++) {
    const auto& s = this->_internal_output_side_packet(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.output_side_packet");
    target = stream->WriteString(17, s, target);
  }

  // .mediapipe.ProfilerConfig profiler_config = 18;
  if (this->has_profiler_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::profiler_config(this), target, stream);
  }

  // string package = 19;
  if (this->package().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package().data(), static_cast<int>(this->_internal_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.package");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_package(), target);
  }

  // string type = 20;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mediapipe.CalculatorGraphConfig.type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_type(), target);
  }

  // bool report_deadlock = 21;
  if (this->report_deadlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_report_deadlock(), target);
  }

  // .mediapipe.MediaPipeOptions options = 1001;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.CalculatorGraphConfig)
  return target;
}

size_t CalculatorGraphConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.CalculatorGraphConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mediapipe.CalculatorGraphConfig.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.PacketFactoryConfig packet_factory = 6;
  total_size += 1UL * this->_internal_packet_factory_size();
  for (const auto& msg : this->packet_factory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.PacketGeneratorConfig packet_generator = 7;
  total_size += 1UL * this->_internal_packet_generator_size();
  for (const auto& msg : this->packet_generator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mediapipe.StatusHandlerConfig status_handler = 9;
  total_size += 1UL * this->_internal_status_handler_size();
  for (const auto& msg : this->status_handler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string input_stream = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_stream_.size());
  for (int i = 0, n = input_stream_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_stream_.Get(i));
  }

  // repeated .mediapipe.ExecutorConfig executor = 14;
  total_size += 1UL * this->_internal_executor_size();
  for (const auto& msg : this->executor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_stream = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_stream_.size());
  for (int i = 0, n = output_stream_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_stream_.Get(i));
  }

  // repeated string input_side_packet = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_side_packet_.size());
  for (int i = 0, n = input_side_packet_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_side_packet_.Get(i));
  }

  // repeated string output_side_packet = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_side_packet_.size());
  for (int i = 0, n = output_side_packet_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_side_packet_.Get(i));
  }

  // string package = 19;
  if (this->package().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package());
  }

  // string type = 20;
  if (this->type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .mediapipe.InputStreamHandlerConfig input_stream_handler = 12;
  if (this->has_input_stream_handler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_stream_handler_);
  }

  // .mediapipe.OutputStreamHandlerConfig output_stream_handler = 13;
  if (this->has_output_stream_handler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_stream_handler_);
  }

  // .mediapipe.ProfilerConfig profiler_config = 18;
  if (this->has_profiler_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profiler_config_);
  }

  // .mediapipe.MediaPipeOptions options = 1001;
  if (this->has_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int32 num_threads = 8;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_threads());
  }

  // int32 max_queue_size = 11;
  if (this->max_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_queue_size());
  }

  // bool report_deadlock = 21;
  if (this->report_deadlock() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculatorGraphConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.CalculatorGraphConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculatorGraphConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculatorGraphConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.CalculatorGraphConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.CalculatorGraphConfig)
    MergeFrom(*source);
  }
}

void CalculatorGraphConfig::MergeFrom(const CalculatorGraphConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.CalculatorGraphConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  packet_factory_.MergeFrom(from.packet_factory_);
  packet_generator_.MergeFrom(from.packet_generator_);
  status_handler_.MergeFrom(from.status_handler_);
  input_stream_.MergeFrom(from.input_stream_);
  executor_.MergeFrom(from.executor_);
  output_stream_.MergeFrom(from.output_stream_);
  input_side_packet_.MergeFrom(from.input_side_packet_);
  output_side_packet_.MergeFrom(from.output_side_packet_);
  if (from.package().size() > 0) {

    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_input_stream_handler()) {
    _internal_mutable_input_stream_handler()->::mediapipe::InputStreamHandlerConfig::MergeFrom(from._internal_input_stream_handler());
  }
  if (from.has_output_stream_handler()) {
    _internal_mutable_output_stream_handler()->::mediapipe::OutputStreamHandlerConfig::MergeFrom(from._internal_output_stream_handler());
  }
  if (from.has_profiler_config()) {
    _internal_mutable_profiler_config()->::mediapipe::ProfilerConfig::MergeFrom(from._internal_profiler_config());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::mediapipe::MediaPipeOptions::MergeFrom(from._internal_options());
  }
  if (from.num_threads() != 0) {
    _internal_set_num_threads(from._internal_num_threads());
  }
  if (from.max_queue_size() != 0) {
    _internal_set_max_queue_size(from._internal_max_queue_size());
  }
  if (from.report_deadlock() != 0) {
    _internal_set_report_deadlock(from._internal_report_deadlock());
  }
}

void CalculatorGraphConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.CalculatorGraphConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorGraphConfig::CopyFrom(const CalculatorGraphConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.CalculatorGraphConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorGraphConfig::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(node_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(packet_factory_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(packet_generator_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(status_handler_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(executor_)) return false;
  if (_internal_has_input_stream_handler()) {
    if (!input_stream_handler_->IsInitialized()) return false;
  }
  if (_internal_has_output_stream_handler()) {
    if (!output_stream_handler_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  return true;
}

void CalculatorGraphConfig::InternalSwap(CalculatorGraphConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  packet_factory_.InternalSwap(&other->packet_factory_);
  packet_generator_.InternalSwap(&other->packet_generator_);
  status_handler_.InternalSwap(&other->status_handler_);
  input_stream_.InternalSwap(&other->input_stream_);
  executor_.InternalSwap(&other->executor_);
  output_stream_.InternalSwap(&other->output_stream_);
  input_side_packet_.InternalSwap(&other->input_side_packet_);
  output_side_packet_.InternalSwap(&other->output_side_packet_);
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_stream_handler_, other->input_stream_handler_);
  swap(output_stream_handler_, other->output_stream_handler_);
  swap(profiler_config_, other->profiler_config_);
  swap(options_, other->options_);
  swap(num_threads_, other->num_threads_);
  swap(max_queue_size_, other->max_queue_size_);
  swap(report_deadlock_, other->report_deadlock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculatorGraphConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::ExecutorConfig* Arena::CreateMaybeMessage< ::mediapipe::ExecutorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::ExecutorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::InputCollection* Arena::CreateMaybeMessage< ::mediapipe::InputCollection >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::InputCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::InputCollectionSet* Arena::CreateMaybeMessage< ::mediapipe::InputCollectionSet >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::InputCollectionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::InputStreamInfo* Arena::CreateMaybeMessage< ::mediapipe::InputStreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::InputStreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::ProfilerConfig* Arena::CreateMaybeMessage< ::mediapipe::ProfilerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::ProfilerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::CalculatorGraphConfig_Node* Arena::CreateMaybeMessage< ::mediapipe::CalculatorGraphConfig_Node >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::CalculatorGraphConfig_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::mediapipe::CalculatorGraphConfig* Arena::CreateMaybeMessage< ::mediapipe::CalculatorGraphConfig >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::CalculatorGraphConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
